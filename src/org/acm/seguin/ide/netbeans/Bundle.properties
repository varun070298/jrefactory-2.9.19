#manifest's description entries
OpenIDE-Module-Name=JRefactory
OpenIDE-Module-Display-Category=Debugging
OpenIDE-Module-Short-Description=Enables refactoring, coding standards, bug finding, UML viewing, etc.
OpenIDE-Module-Long-Description=Enables refactoring, coding standards, bug finding, UML viewing, etc.
OpenIDE-Module-Package-Dependency-Message=




LBL_PrettyPrinterAction=Pretty Print Buffer
HINT_PrettyPrinterAction=Apply JRefactory pretty printer to Java source in current buffer
# Actions API
LBL_ExtractMethodAction=Extract Method
# To include a mnemomic for the Main Window menus, use e.g.:
# LBL_Action=My Act&ion
# If you want a special hint when it appears in a toolbar,
# override initialize() as indicated and use:
# HINT_Action=<tooltip for action>
HINT_ExtractMethodAction=Apply JRefactory extract method

LBL_CSCheckBufferAction=In this buffer
HINT_CSCheckBufferAction=Check coding standards of current buffer if it contains Java code

LBL_CPDCheckBufferAction=In this buffer
HINT_CPDCheckBufferAction=Find cut and paste within current buffer

LBL_OptionsAction=JRefactory Options...
HINT_OptionsAction=configure the JavaStyle plugin

LBL_JRefactoryAction=JRefactory...
HINT_JRefactoryAction=Refactoring, UML class diagrams, Coding Standards, Cut&Paste, AST Viewer, FindBugs

LBL_CSCheckAllBuffersAction=In all open buffers

HINT_CSCheckAllBuffersAction=Check coding standards of all open buffers containing Java code

LBL_CSCheckDirAction=In directory...

HINT_CSCheckDirAction=Check the coding standards of all Java source files in a directory

LBL_CSCheckDirRecursiveAction=In this and subdirectories...

HINT_CSCheckDirRecursiveAction=Check the coding standards of all Java source files in a directory and all sub-directories

LBL_CPDCheckAllBuffersAction=In all open buffers

HINT_CPDCheckDirAction=Check for cut and paste in Java source code the selected directory

HINT_CPDCheckAllBuffersAction=Check for cut and paste in all open buffers containing Java code

LBL_CPDCheckDirAction=In directory...

LBL_CPDCheckDirRecursiveAction=In this and subdirectories...

HINT_CPDCheckDirRecursiveAction=Check for cut and paste in Java Source code in the selected directory and all subdirectories

LBL_jrefactory=JRefactory

# Window System API

# TopComponent
LBL_component_name=JRefactory
#LBL_mode_name=<name of mode>
#LBL_workspace_name=<name of workspace>

# WizardDescriptor
# Dialog title:
TITLE_wizard=My Wizard

# WizardDescriptor.Iterator
# Label the sequence #. Appears at top of pane:
# e.g. "Panel Name (1 of 3)"
TITLE_x_of_y={0} of {1}
# Provide list of steps to show in left pane:
#LBL_step_1=Select First Thing
#LBL_step_2=Configure Details

# WizardDescriptor.Panel
# Will appear in dialog title; see above
TITLE_WizardPanel=Panel Name

# CallableSystemAction
LBL_Action=Run Action
# Window System API

# TopComponent
LBL_component_name=<name of component>
#LBL_mode_name=<name of mode>
#LBL_workspace_name=<name of workspace>

# WizardDescriptor
# Dialog title:
TITLE_wizard=My Wizard

# WizardDescriptor.Iterator
# Label the sequence #. Appears at top of pane:
# e.g. "Panel Name (1 of 3)"
TITLE_x_of_y={0} of {1}
# Provide list of steps to show in left pane:
#LBL_step_1=Select First Thing
#LBL_step_2=Configure Details

# WizardDescriptor.Panel
# Will appear in dialog title; see above
TITLE_WizardPanel=Panel Name

# CallableSystemAction
LBL_Action=Run Action
# Window System API

# TopComponent
LBL_component_name=<name of component>
#LBL_mode_name=<name of mode>
#LBL_workspace_name=<name of workspace>

# WizardDescriptor
# Dialog title:
TITLE_wizard=My Wizard

# WizardDescriptor.Iterator
# Label the sequence #. Appears at top of pane:
# e.g. "Panel Name (1 of 3)"
TITLE_x_of_y={0} of {1}
# Provide list of steps to show in left pane:
#LBL_step_1=Select First Thing
#LBL_step_2=Configure Details

# WizardDescriptor.Panel
# Will appear in dialog title; see above
TITLE_WizardPanel=Panel Name

# CallableSystemAction
LBL_Action=Run Action

LBL_jrefactory_cpd_annotation=Annotation for Cut and Paste Detection

LBL_jrefactory_cs_annotation=Annotation for Coding Standards checker

LBL_RenameClassAction=Rename Class

HINT_RenameClassAction=Rename this class. Change references to it to the new class name.

HINT_ExtractInterfaceAction=Extract an interface from public methods of this class

LBL_ExtractInterfaceAction=Extract interface

LBL_RemoveClassAction=Remove Class

HINT_RemoveClassAction=Remove this class

LBL_AddChildClassAction=Add child class

HINT_AddChildClassAction=Add a child to this class

LBL_AddParentClassAction=Add parent class

HINT_AddParentClassAction=Add a parent to this class

LBL_MoveClassAction=Move class

HINT_MoveClassAction=Move class to annother package

LBL_RenameMethodAction=Rename method

HINT_RenameMethodAction=Rename a method

LBL_PushUpMethodAction=Push up method

HINT_PushUpMethodAction=Push up method into superclass

LBL_PushUpAbstractMethodAction=Push up (abstract) method

HINT_PushUpAbstractMethodAction=Push up the method signature as an abstract method into the superclass

LBL_PushDownMethodAction=Push down method

HINT_PushDownMethodAction=Push down method into derived class(es)

LBL_MoveMethodAction=Move method

HINT_MoveMethodAction=Method method into another class

LBL_RenameParameterAction=Rename parameter(s)

HINT_RenameParameterAction=Rename one or more of the method parameters

LBL_RenameFieldAction=Rename field

HINT_RenameFieldAction=Rename field (i.e. member variable)

LBL_PushUpFieldAction=Push up field

HINT_PushUpFieldAction=Push up field (i.e. member variable) into superclass

LBL_PushDownFieldAction=Push down field

HINT_PushDownFieldAction=Push down field (i.e. member variable) into derived class(es)

LBL_RefactorDirAction=Refactor

LBL_RefactorTypeDirAction=Refactor type

LBL_RefactorMethodDirAction=Refactor Method

LBL_RefactorFieldDirAction=Refactor Field

LBL_CSDirAction=Coding Standards

LBL_CPDDirAction=Detect Duplicate Code

LBL_CSCheckBufferAction_1=Check Coding Standards

LBL_CPDCheckBufferAction_1=Detect Cut and Paste
