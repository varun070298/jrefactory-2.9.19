/**
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */

options {
  JAVA_UNICODE_ESCAPE=false;
  UNICODE_INPUT=true;
  VISITOR=true;
  MULTI=true;
}

PARSER_BEGIN(JavaParser)

public class JavaParser {

  public static void main(String args[]) {
  }

}

PARSER_END(JavaParser)


/* WHITE SPACE */

SKIP :
{
 " " | "\t" | "\f"
}

SPECIAL_TOKEN :
{
  "\n"
| "\r"
| "\r\n"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
|
  "/*<" : IN_CATEGORY_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
  |
  <EOF> : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_CATEGORY_COMMENT>
SPECIAL_TOKEN :
{
  <CATEGORY_COMMENT: ">*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT,IN_CATEGORY_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" >
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

SimpleNode CompilationUnit() :
{
    Token tok;
}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  tok=<EOF>
  {
    jjtn000.addSpecial("EOF", tok.specialToken);
    return jjtn000;
  }
}

void PackageDeclaration() :
{
    Token tok;
}
{
  tok="package" {jjtn000.addSpecial("package", tok.specialToken);}
  Name()
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void ImportDeclaration() :
{
    Token tok = null;
    Token specialPoint = null;
}
{
  specialPoint="import" {jjtn000.addSpecial("import", specialPoint.specialToken);}
  Name()
    [
      specialPoint="." {jjtn000.addSpecial("period", specialPoint.specialToken);}
      tok="*" {jjtn000.addSpecial("star", tok.specialToken);}
    ]
  specialPoint=";" {jjtn000.addSpecial("semicolon", specialPoint.specialToken);}
  {
    jjtn000.setImportPackage(tok != null);
  }
}

void TypeDeclaration() :
{
    Token specialPoint;
}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* "class" )
  ClassDeclaration()
|
  InterfaceDeclaration()
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{
  Token tok;
}
{
  (
    (tok="abstract" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="strictfp" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="public"   {jjtn000.addModifier(tok.image); jjtn000.addSpecial("public", tok.specialToken);} )
  )*
  UnmodifiedClassDeclaration()
  [ ";" ]
}

void UnmodifiedClassDeclaration() :
{
    Token tok;
    Token specialToken;
}
{
  specialToken="class" {jjtn000.addSpecial("class", specialToken.specialToken);}
  (
    tok=<IDENTIFIER>
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  )
  [
    specialToken="extends"  {jjtn000.addSpecial("extends", specialToken.specialToken);}
    Name()
  ]
  [
    specialToken="implements"  {jjtn000.addSpecial("implements", specialToken.specialToken);}
    NameList()
  ]
  ClassBody()
}

void ClassBody() :
{
    Token tok;
}
{
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( ClassBodyDeclaration() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
}

void NestedClassDeclaration() :
{
    Token tok;
}
{
  (
    (tok="static"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="abstract"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"     {jjtn000.addModifier(tok.image); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.addModifier(tok.image); jjtn000.addSpecial("private", tok.specialToken);} )
  )*
  UnmodifiedClassDeclaration()
  [ ";" ]
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(2)
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] Name() "(" )
  ConstructorDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

// This production is to determine lookahead only.
void MethodDeclarationLookahead() :
{}
{
  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp" )*
  ResultType() <IDENTIFIER> "("
}

void InterfaceDeclaration() :
{
    Token tok;
}
{
  (
    (tok="abstract"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="public"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("strictfp", tok.specialToken);} )
  )*
  UnmodifiedInterfaceDeclaration()
  [ ";" ]
}

void NestedInterfaceDeclaration() :
{
    Token tok;
}
{
  (
    (tok="static"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="abstract"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="final"     {jjtn000.addModifier(tok.image); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.addModifier(tok.image); jjtn000.addSpecial("private", tok.specialToken);} )
  )*
  UnmodifiedInterfaceDeclaration()
  [ ";" ]
}

void UnmodifiedInterfaceDeclaration() :
{
    Token tok;
}
{
  tok="interface" {jjtn000.addSpecial("interface", tok.specialToken);}
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    {jjtn000.addSpecial("id", tok.specialToken);}
  }
  [
    tok="extends" {jjtn000.addSpecial("extends", tok.specialToken);}
    NameList()
  ]
  InterfaceBody()
}

void InterfaceBody() :
{
	Token tok;
}
{
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( InterfaceMemberDeclaration() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( MethodDeclarationLookahead() )
  MethodDeclaration()
|
  FieldDeclaration()
}

void FieldDeclaration() :
{
    Token tok;
    int count = 0;
}
{
  (
    (tok="static"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="transient" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("transient", tok.specialToken);} ) |
    (tok="volatile"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("volatile", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="final"     {jjtn000.addModifier(tok.image); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.addModifier(tok.image); jjtn000.addSpecial("private", tok.specialToken);} )
  )*
  Type() VariableDeclarator()
  (
    tok="," {jjtn000.addSpecial("comma" + count, tok.specialToken);}
    VariableDeclarator()
  )*
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
  (";")*
}

void VariableDeclarator() :
{
    Token tok;
}
{
  VariableDeclaratorId()
  [
    tok="=" {jjtn000.addSpecial("equals", tok.specialToken);}
    VariableInitializer()
  ]
}

void VariableDeclaratorId() :
{
    Token tok;
    int count = 0;
}
{
  tok=<IDENTIFIER>
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.setName(tok.image);
  }
  (
    tok="[" {jjtn000.addSpecial("[." + count, tok.specialToken);}
    tok="]" {jjtn000.addSpecial("]." + count, tok.specialToken);}
    {count++;}
  )*
  {
    jjtn000.setArrayCount(count);
  }
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer() :
{
    Token tok;
    int count = 0;
}
{
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  [
    VariableInitializer()
    (
      LOOKAHEAD(2)
      tok="," {jjtn000.addSpecial("comma" + count, tok.specialToken); count++;}
      VariableInitializer()
    )*
  ]
  [
    tok=","
    {
      jjtn000.addSpecial("comma" + count, tok.specialToken);
      count++;
      jjtn000.setFinalComma(true);
    }
  ]
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
}

void MethodDeclaration() :
{
    Token tok;
}
{
  (
    (tok="public"       {jjtn000.addModifier(tok.image); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected"    {jjtn000.addModifier(tok.image); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"      {jjtn000.addModifier(tok.image); jjtn000.addSpecial("private", tok.specialToken);} ) |
    (tok="static"       {jjtn000.addModifier(tok.image); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="abstract"     {jjtn000.addModifier(tok.image); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"        {jjtn000.addModifier(tok.image); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="native"       {jjtn000.addModifier(tok.image); jjtn000.addSpecial("native", tok.specialToken);} ) |
    (tok="strictfp"     {jjtn000.addModifier(tok.image); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="synchronized" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("synchronized", tok.specialToken);} )
  )*
  ResultType() MethodDeclarator()
  [
    tok="throws" {jjtn000.addSpecial("throws", tok.specialToken);}
    NameList()
  ]
  (
    Block() |
    (tok=";"  {jjtn000.addSpecial("semicolon", tok.specialToken);})
  )
  //  Ignore the extra semicolons
  ( ";" )*
}

void MethodDeclarator() :
{
    Token tok;
    int arrayCount = 0;
}
{
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }
  FormalParameters()
  (
    tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
    tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
    {arrayCount++;}
  )*
  {
    jjtn000.setArrayCount(arrayCount);
  }
}

void FormalParameters() :
{
    Token tok;
    int commaCount = 0;
}
{
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  [
    FormalParameter()
    (
      tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
      FormalParameter()
      {commaCount++;}
    )*
  ]
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
}

void FormalParameter() :
{
    Token tok = null;
}
{
  [ tok="final" ] Type() VariableDeclaratorId()
  {
     jjtn000.setUsingFinal(tok != null);
     if (tok != null) {
        jjtn000.addSpecial("final", tok.specialToken);
     }
  }
}

void ConstructorDeclaration() :
{
    Token tok;
    Token mod;
}
{
  [
    (mod="public"       {jjtn000.addModifier(mod.image); jjtn000.addSpecial("public", mod.specialToken);} ) |
    (mod="protected"    {jjtn000.addModifier(mod.image); jjtn000.addSpecial("protected", mod.specialToken);} ) |
    (mod="private"      {jjtn000.addModifier(mod.image); jjtn000.addSpecial("private", mod.specialToken);} )
  ]
  tok=<IDENTIFIER>
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.setName(tok.image);
  }
  FormalParameters()
  [
    tok="throws" {jjtn000.addSpecial("throws", tok.specialToken);}
    NameList()
  ]
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
    [ LOOKAHEAD(ExplicitConstructorInvocation()) ExplicitConstructorInvocation() ]
    ( BlockStatement() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
  [
    ";"
  ]
}

void ExplicitConstructorInvocation() :
{
    Token tok;
    Token semicolon;
    Token dot = null;
}
{
(
  LOOKAHEAD("this" Arguments() ";")
  tok="this" Arguments() semicolon=";"
|
  [ LOOKAHEAD(2) PrimaryExpression() dot="." ] [<IDENTIFIER> "."] tok="super" Arguments() semicolon=";"
)
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("explicit", tok.specialToken);
    jjtn000.addSpecial("semicolon", semicolon.specialToken);
    if (dot != null) {
        jjtn000.addSpecial(".", dot.specialToken);
    }
  }
}

void Initializer() :
{
    Token tok = null;
}
{
  [ tok = "static" ] Block()
  {
    jjtn000.setUsingStatic(tok != null);
    if (tok != null) {
      jjtn000.addSpecial("static", tok.specialToken);
    }
  }
  ( ";" )*
}


/*
 * Type, name and expression syntax follows.
 */

void Type():
{
    int arrayCount = 0;
    Token tok;
}
{
  ( PrimitiveType() | Name() )
  (
    tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
    tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
    {arrayCount++;}
  )*
  {
     jjtn000.setArrayCount(arrayCount);
  }
}

void PrimitiveType() :
{
    Token tok;
}
{
(
    tok="boolean"
  |
    tok="char"
  |
    tok="byte"
  |
    tok="short"
  |
    tok="int"
  |
    tok="long"
  |
    tok="float"
  |
    tok="double"
)
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("primitive", tok.specialToken);
  }
}

void ResultType() :
{
    Token tok;
}
{
  (tok="void" {jjtn000.addSpecial("primitive", tok.specialToken);})
|
  Type()
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
    Token tok;
    Token period;
    int count = 0;
}
{
  tok=<IDENTIFIER> {jjtn000.addSpecial("id" + count, tok.specialToken);}
  {
    jjtn000.addNamePart(tok.image);
    count++;
  }
  (
    LOOKAHEAD(2)
    period="."
    tok=<IDENTIFIER>
    {
      jjtn000.addNamePart(tok.image);
      jjtn000.addSpecial("period" + count, tok.specialToken);
      jjtn000.addSpecial("id" + count, tok.specialToken);
      count++;
    }
  )*
}

void NameList() :
{
    Token tok;
    int commaCount = 0;
}
{
  Name()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
    Name()
    {commaCount++;}
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{
    Token tok;
}
{
  (
    tok="="    |
    tok="*="   |
    tok="/="   |
    tok="%="   |
    tok="+="   |
    tok="-="   |
    tok="<<="  |
    tok=">>="  |
    tok=">>>=" |
    tok="&="   |
    tok="^="   |
    tok="|="
  )
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("operator", tok.specialToken);
  }
}

void ConditionalExpression() :
{
    Token tok;
}
{
  ConditionalOrExpression()
  [
    tok="?" {jjtn000.addSpecial("?", tok.specialToken);}
    Expression()
    tok=":" {jjtn000.addSpecial(":", tok.specialToken);}
    ConditionalExpression()
  ]
}

void ConditionalOrExpression() :
{
    Token tok;
    int count = 0;
}
{
  ConditionalAndExpression()
  (
    tok="||" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    ConditionalAndExpression()
  )*
}

void ConditionalAndExpression() :
{
    Token tok;
    int count = 0;
}
{
  InclusiveOrExpression()
  (
    tok="&&" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    InclusiveOrExpression()
  )*
}

void InclusiveOrExpression() :
{
    Token tok;
    int count = 0;
}
{
  ExclusiveOrExpression()
  (
    tok="|" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    ExclusiveOrExpression()
  )*
}

void ExclusiveOrExpression() :
{
    Token tok;
    int count = 0;
}
{
  AndExpression()
  (
    tok="^" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    AndExpression()
  )*
}

void AndExpression() :
{
    Token tok;
    int count = 0;
}
{
  EqualityExpression()
  (
    tok="&" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    EqualityExpression()
  )*
}

void EqualityExpression() :
{
    Token tok;
    int count = 0;
}
{
  InstanceOfExpression()
  (
    ( tok="==" | tok="!=" )
    InstanceOfExpression()
    {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
    }
  )*
}

void InstanceOfExpression() :
{
    Token tok;
}
{
  RelationalExpression()
  [
    tok="instanceof"
    Type()
    {jjtn000.addSpecial("operator.0", tok.specialToken);}
  ]
}

void RelationalExpression() :
{
    Token tok;
    int count = 0;
}
{
  ShiftExpression()
  (
    (
      tok="<"  |
      tok=">"  |
      tok="<=" |
      tok=">="
    )
    {
      jjtn000.addName(tok.image);
      jjtn000.addSpecial("operator." + count, tok.specialToken);
      count++;
    }
    ShiftExpression()
  )*
}

void ShiftExpression() :
{
    Token tok;
    int count = 0;
}
{
  AdditiveExpression()
    (
      (
        tok="<<" |
        tok=">>" |
        tok=">>>"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      AdditiveExpression()
    )*
}

void AdditiveExpression() :
{
    Token tok;
    int count = 0;
}
{
  MultiplicativeExpression()
    (
      (
        tok="+" |
        tok="-"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      MultiplicativeExpression()
    )*
}

void MultiplicativeExpression() :
{
    Token tok;
    int count = 0;
}
{
  UnaryExpression()
    (
      (
        tok="*" |
        tok="/" |
        tok="%"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      UnaryExpression()
    )*
}

void UnaryExpression() :
{
    Token tok;
}
{
  (
    (
      tok="+" |
      tok="-"
    )
    UnaryExpression()
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  )
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{
    Token tok;
}
{
  tok="++" PrimaryExpression() {jjtn000.addSpecial("operator", tok.specialToken);}
}

void PreDecrementExpression() :
{
    Token tok;
}
{
  tok="--" PrimaryExpression() {jjtn000.addSpecial("operator", tok.specialToken);}
}

void UnaryExpressionNotPlusMinus() :
{
    Token tok;
}
{
  (
    (
      tok="~" |
      tok="!"
    )
    UnaryExpression()
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  )
|
  LOOKAHEAD( CastLookahead() )
  CastExpression()
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
|
  LOOKAHEAD("(" Name() "[")
  "(" Name() "[" "]"
|
  "(" Name() ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
}

void PostfixExpression() :
{
    Token tok = null;
}
{
  PrimaryExpression() [ tok="++" | tok="--" ]
  {
    if (tok != null) {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  }
}

void CastExpression() :
{
    Token tok;
}
{
  LOOKAHEAD("(" PrimitiveType())
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  Type()
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
  UnaryExpression()
|
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  Type()
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
  UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix() ( LOOKAHEAD(2) PrimarySuffix() )*
}

void PrimaryPrefix() :
{
  Token tok;
  Token superTok;
  String name = "";
  int count = 0;
}
{
  Literal()
|
  tok="this"
  {
    jjtn000.setName("this");
    jjtn000.addSpecial("this", tok.specialToken);
  }
|
  LOOKAHEAD( (<IDENTIFIER> ".")* "super" )
  (
     tok=<IDENTIFIER> "."
     {
     	name = name + tok.image + ".";
	    jjtn000.addSpecial("this." + count, tok.specialToken);
	    count++;
     }
  )*
  superTok="super" "." tok=<IDENTIFIER>
  {
  	jjtn000.setCount(count);
	name = name + "super." + tok.image;
    jjtn000.setName(name);
    jjtn000.addSpecial("this", superTok.specialToken);
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()
}

void PrimarySuffix() :
{
    Token tok;
}
{
  LOOKAHEAD(2)
  tok="." {jjtn000.addSpecial("dot", tok.specialToken);}
  tok="this"
  {
    jjtn000.setName("this");
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  LOOKAHEAD(2)
  tok="."  {jjtn000.addSpecial("dot", tok.specialToken);}
  AllocationExpression()
|
  tok="[" {jjtn000.addSpecial("[", tok.specialToken);}
  Expression()
  tok="]" {jjtn000.addSpecial("]", tok.specialToken);}
|
  tok="." {jjtn000.addSpecial("dot", tok.specialToken);}
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  Arguments()
}

void Literal() :
{
    Token tok = null;
}
{
  (
    tok=<INTEGER_LITERAL> |
    tok=<FLOATING_POINT_LITERAL> |
    tok=<CHARACTER_LITERAL> |
    tok=<STRING_LITERAL> |
    BooleanLiteral() |
    NullLiteral()
  )
  {
    if (tok != null) {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  }
}

void BooleanLiteral() :
{
    Token tok;
}
{
  (
    tok="true" |
    tok="false"
  )
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }
}

void NullLiteral() :
{
    Token tok;
}
{
  tok="null"
  {
    jjtn000.addSpecial("id", tok.specialToken);
  }
}

void Arguments() :
{
    Token tok;
}
{
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  [ ArgumentList() ]
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
}

void ArgumentList() :
{
    Token tok;
    int count = 0;
}
{
  Expression()
  (
    tok=","  {jjtn000.addSpecial("comma." + count, tok.specialToken); count++;}
    Expression()
  )*
}

void AllocationExpression() :
{
    Token tok;
}
{

    LOOKAHEAD(2)
    tok="new" {jjtn000.addSpecial("id", tok.specialToken);}
    PrimitiveType()
    ArrayDimsAndInits()

|

    tok="new" {jjtn000.addSpecial("id", tok.specialToken);}
    Name()
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassBody() ]
    )

}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{
    Token tok;
    int arrayCount = 0;
}
{
  (
    LOOKAHEAD(2)
    (
      LOOKAHEAD(2)
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      Expression()
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )+
    (
      LOOKAHEAD(2)
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )*
   |
    (
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )+
    ArrayInitializer()
  )
  {
    jjtn000.setArrayCount(arrayCount);
  }
}


/*
 * Statement syntax follows.
 */

void Statement() :
{
    Token tok;
}
{
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
|
  AssertionStatement()
}

void LabeledStatement() :
{
    Token tok;
    Token colon;
}
{
  tok=<IDENTIFIER> colon=":" Statement()
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.addSpecial("colon", colon.specialToken);
  }
}

void Block() :
{
    Token tok;
}
{
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( BlockStatement() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
}

void BlockStatement() :
{
    Token tok;
}
{
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration()
  tok=";"
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  Statement()
|
  LOOKAHEAD([ "final" ] "class")
  [
    tok="final"
    {
      jjtn000.addSpecial("final", tok.specialToken);
      jjtn000.setFinal(true);
     }
  ]
  UnmodifiedClassDeclaration()
|
  LOOKAHEAD([ "final" ] "interface")
  [
    tok="final"
    {
      jjtn000.addSpecial("final", tok.specialToken);
      jjtn000.setFinal(true);
     }
  ]
  UnmodifiedInterfaceDeclaration()
}

void LocalVariableDeclaration() :
{
    Token tok = null;
    int count = 0;
}
{
  [ tok="final" ]
  {
    jjtn000.setUsingFinal(tok != null);
    if (tok != null) {
        jjtn000.addSpecial("final", tok.specialToken);
    }
  }
  Type()
  VariableDeclarator()
  (
    tok="," {jjtn000.addSpecial("comma." + count, tok.specialToken); count++;}
    VariableDeclarator()
  )*
}

void EmptyStatement() :
{
    Token tok;
}
{
  tok=";"
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
    Token tok;
}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    tok="++" {jjtn000.setName("++"); jjtn000.addSpecial("id", tok.specialToken);}
  |
    tok="--" {jjtn000.setName("--"); jjtn000.addSpecial("id", tok.specialToken);}
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement() :
{
    Token tok;
}
{
  tok="switch" {jjtn000.addSpecial("switch", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  tok="{" {jjtn000.addSpecial("beginBlock", tok.specialToken);}
    ( SwitchLabel() ( BlockStatement() )* )*
  tok="}" {jjtn000.addSpecial("endBlock", tok.specialToken);}
}

void SwitchLabel() :
{
    Token tok;
    Token colon;
}
{
(
  tok="case" Expression() colon=":"
|
  tok="default" colon=":"
)
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.addSpecial("colon", colon.specialToken);
  }
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
    Token tok;
}
{
  tok="if" {jjtn000.addSpecial("if", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()
  [
    LOOKAHEAD(1)
    tok="else" {jjtn000.addSpecial("else", tok.specialToken);}
    Statement()
  ]
}

void WhileStatement() :
{
    Token tok;
}
{
  tok="while" {jjtn000.addSpecial("while", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()
}

void DoStatement() :
{
    Token tok;
}
{
  tok="do" {jjtn000.addSpecial("do", tok.specialToken);}
  Statement()
  tok="while" {jjtn000.addSpecial("while", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void ForStatement() :
{
    Token tok;
}
{
  tok="for" {jjtn000.addSpecial("for", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  [ ForInit() ]
  tok=";" {jjtn000.addSpecial("init", tok.specialToken);}
  [ Expression() ]
  tok=";" {jjtn000.addSpecial("test", tok.specialToken);}
  [ ForUpdate() ]
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] Type() <IDENTIFIER> )
  LocalVariableDeclaration()
|
  StatementExpressionList()
}

void StatementExpressionList() :
{
    Token tok;
    int count = 0;
}
{
  StatementExpression()
  (
    tok="," {jjtn000.addSpecial("comma." + count, tok.specialToken);  count++;}
    StatementExpression()
  )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{
    Token tok;
}
{
  tok="break" {jjtn000.addSpecial("break", tok.specialToken);}
  [ tok=<IDENTIFIER> {jjtn000.setName(tok.image); jjtn000.addSpecial("id", tok.specialToken);}]
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}

}

void ContinueStatement() :
{
    Token tok;
}
{
  tok="continue" {jjtn000.addSpecial("continue", tok.specialToken);}
  [ tok=<IDENTIFIER> {jjtn000.setName(tok.image); jjtn000.addSpecial("id", tok.specialToken);}]
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void ReturnStatement() :
{
    Token tok;
}
{
  tok="return" {jjtn000.addSpecial("return", tok.specialToken);}
  [ Expression() ]
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void ThrowStatement() :
{
    Token tok;
}
{
  tok="throw" {jjtn000.addSpecial("throw", tok.specialToken);}
  Expression()
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void SynchronizedStatement() :
{
    Token tok;
}
{
  tok="synchronized"  {jjtn000.addSpecial("synchronized", tok.specialToken);}
  tok="("  {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")"  {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{
    Token tok;
    int catchCount = 0;
}
{
  tok="try"  {jjtn000.addSpecial("try", tok.specialToken);}
  Block()
  (
    tok="catch"  {jjtn000.addSpecial("catch" + catchCount, tok.specialToken);}
    tok="("  {jjtn000.addSpecial("beginExpr" + catchCount, tok.specialToken);}
    FormalParameter()
    tok=")"  {jjtn000.addSpecial("endExpr" + catchCount, tok.specialToken);}
    Block()
    {catchCount++;}
  )*
  [
    tok="finally"  {jjtn000.addSpecial("finally", tok.specialToken);}
    Block()
  ]
}

void AssertionStatement() :
{
    Token tok;
}
{
  tok="assert"  {jjtn000.addSpecial("assert", tok.specialToken);}
  Expression()
  [
	  tok=":"  {jjtn000.addSpecial("colon", tok.specialToken);}
	  Expression()
  ]
  tok=";"
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
}


