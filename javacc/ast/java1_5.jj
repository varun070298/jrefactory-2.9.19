/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. java1_5.jj */
/*@egen*//**
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 * Author: Mike Atkinson - jdk 1.5 additions & amy other changes
 * Date: 19 June 2003
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */

options {
  STATIC=false;                          
  JAVA_UNICODE_ESCAPE=false;
  UNICODE_INPUT=true;                                
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;
  OPTIMIZE_TOKEN_MANAGER=true;
}

PARSER_BEGIN(JavaParser)

public class JavaParser/*@bgen(jjtree)*/implements JavaParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTJavaParserState jjtree = new JJTJavaParserState();

/*@egen*/

  private static final boolean TESTING = true;
  private static String target_jdk = "1.5.0";
  private static boolean jdk1_4 = true;
  private static boolean jdk1_5 = true;
  public static boolean generics = true;
  private static boolean annotations = true;
  static boolean useAssert = true;

  public static void setTargetJDK(String target) {
     target_jdk = target;
     jdk1_4 = "1.4.0".compareTo(target_jdk) <= 0;
     jdk1_5 = "1.5.0".compareTo(target_jdk) <= 0;
     generics = "1.5.0".compareTo(target_jdk) <= 0;
     annotations = "1.5.0".compareTo(target_jdk) <= 0;
     useAssert = "1.4.0".compareTo(target_jdk) <= 0;
  }
  static {
      setTargetJDK("1.5.0");
  }
  
  /** This lookahead is here rather than in the grammar to stop the
   *  generated tree containing an ASTExpressionLookahead class and
   *  the visitor having visit(ASTExpressionLookahead node, Object data);
   */
  private boolean expressionLookahead() {
     Token tok = getToken(1);
     if (tok.kind==COMMA) {
        tok = getToken(2);
        if (!(tok.kind==RPAREN || tok.kind==RBRACE)) {
            return true;
        }
     }
     return false;
  }


  /** This lookahead is here rather than in the grammar to stop the
   *  generated tree containing an ASTForLookahead class and
   *  the visitor having visit(ASTForLookahead node, Object data);
   */
  private boolean forLookahead() {
    int x = 0;
    Token tok = getToken(++x);
    if (tok.kind==FINAL) {
       tok = getToken(++x);
    }
    if (isPrimitiveType(tok)) {
       tok = getToken(++x);
    } else if (tok.kind==IDENTIFIER) {
       tok = getToken(++x);
       while (tok.kind==DOT) {
          tok = getToken(++x);
          if (tok.kind != IDENTIFIER) {
             return false;
          }
          tok = getToken(++x);
       }
    } else {
       return false;
    }
    if (tok.kind==LT) {
       while (true) {
          tok = getToken(++x);
          if (   tok.kind==LT || tok.kind==GT || tok.kind==RSIGNEDSHIFT || tok.kind==RUNSIGNEDSHIFT || tok.kind==DOT
              || tok.kind==COMMA || tok.kind==HOOK || tok.kind==SUPER || tok.kind==EXTENDS || tok.kind==IDENTIFIER) {
             // do nothing
          } else if (tok.kind==LBRACKET) {
             tok = getToken(++x);
             if (tok.kind!=RBRACKET) {
                return false;
             }
          } else {
             break;
          }
       }
       x--;
    } else if (tok.kind==LBRACKET) {
       while (tok.kind==LBRACKET) {
          tok = getToken(++x);
          if (tok.kind!=RBRACKET) {
             return false;
          }
          tok = getToken(++x);
       }
       if (tok.kind != IDENTIFIER) {
          return false;
       }
    }
    tok = getToken(++x);
    return (tok.kind==COLON);
  }


  /** This lookahead is here rather than in the grammar to stop the
   *  generated tree containing an ASTMethodDeclarationLookahead class and
   *  the visitor having visit(ASTMethodDeclarationLookahead node, Object data);
   */
  private boolean methodDeclarationLookahead() {
    int x = 0;
    Token tok = getToken(++x);
    while (    tok.kind==PUBLIC || tok.kind==PROTECTED || tok.kind==PRIVATE
            || tok.kind==STATIC || tok.kind==ABSTRACT || tok.kind==FINAL
            || tok.kind==NATIVE || tok.kind==SYNCHRONIZED || tok.kind==STRICTFP
            || tok.kind==ATTRIBUTE) {
       if (tok.kind==ATTRIBUTE) {
          int count=1;
          tok = getToken(++x);
          if (tok.kind!=IDENTIFIER) {
             return false;
          }
          tok = getToken(++x);
          if (tok.kind != LPAREN) {
             return false;
          }
          while (count>0) {
             tok = getToken(++x);
             if (tok.kind == LPAREN) {
                count++;
             } else if (tok.kind == RPAREN) {
                count--;
             }
          }
       }
       tok = getToken(++x);
    }

    if ( isPrimitiveType(tok) || tok.kind==VOID ) {
       tok = getToken(++x);
    } else if (tok.kind==IDENTIFIER) {
       tok = getToken(++x);
       while (tok.kind==DOT) {
          tok = getToken(++x);
          if (tok.kind != IDENTIFIER) {
             return false;
          }
          tok = getToken(++x);
       }
    } else if (tok.kind==LT) {
       return true;
    } else {
       return false;
    }
    if (tok.kind==LT) {
       while (true) {
          tok = getToken(++x);
          if (   tok.kind==LT || tok.kind==GT || tok.kind==RSIGNEDSHIFT || tok.kind==RUNSIGNEDSHIFT || tok.kind==DOT
              || tok.kind==COMMA || tok.kind==HOOK || tok.kind==SUPER || tok.kind==EXTENDS || tok.kind==IDENTIFIER) {
             // do nothing
          } else if (tok.kind==LBRACKET) {
             tok = getToken(++x);
             if (tok.kind!=RBRACKET) {
                return false;
             }
          } else {
             break;
          }
       }
       x--;
    } else if (tok.kind==LBRACKET) {
       while (tok.kind==LBRACKET) {
          tok = getToken(++x);
          if (tok.kind!=RBRACKET) {
             return false;
          }
          tok = getToken(++x);
       }
       if (tok.kind != IDENTIFIER) {
          return false;
       }
    }
    tok = getToken(++x);
    return (tok.kind==LPAREN);
  }


  /** This lookahead is here rather than in the grammar to stop the
   *  generated tree containing an ASTCastLookahead class and
   *  the visitor having visit(ASTCastLookahead node, Object data);
   */
   private boolean castLookahead() {
      int x = 0;
      Token tok = getToken(++x);
      if (tok.kind!=LPAREN) {
         return false;
      }
      tok = getToken(++x);
      if (tok.kind==IDENTIFIER) {
         tok = getToken(++x);
         while (true) {
            if (tok.kind==LT) {
               x = typeArguments(x);
               if (x<0) {
                  return false;
               }
               tok = getToken(x);  // load next token
            }
            if (tok.kind==LBRACKET) {
               while (tok.kind==LBRACKET) {
                  tok = getToken(++x);
                  if (tok.kind!=RBRACKET) {
                     return false;
                  }
                  tok = getToken(++x);
               }
            }
            if (tok.kind==RPAREN) {
               tok = getToken(++x);
               return castEnd(tok);
            } else if (tok.kind!=DOT) {
               return false;
            }
            tok = getToken(++x);
            if (isPrimitiveType(tok)) {
               tok = getToken(++x);
               if (tok.kind==LBRACKET) {
                  while (tok.kind==LBRACKET) {
                     tok = getToken(++x);
                     if (tok.kind!=RBRACKET) {
                        return false;
                     }
                     tok = getToken(++x);
                  }
               }
               return (tok.kind==RPAREN);
            } else if (tok.kind==IDENTIFIER) {
               tok = getToken(++x);
            }
            
         }
      } else if (isPrimitiveType(tok)) {
         tok = getToken(++x);
         if (tok.kind==LBRACKET) {
            while (tok.kind==LBRACKET) {
               tok = getToken(++x);
               if (tok.kind!=RBRACKET) {
                  return false;
               }
               tok = getToken(++x);
            }
         }
         return (tok.kind==RPAREN);
      }
      return false;
   }
   
   
   private boolean isPrimitiveType(Token tok) {
      return tok.kind==BOOLEAN || tok.kind==CHAR  || tok.kind==BYTE
          || tok.kind==SHORT   || tok.kind==INT   || tok.kind==LONG
          || tok.kind==FLOAT   || tok.kind==DOUBLE;
   }

   private int typeArguments(int x) {
      int level = 1;
      while (true) {
         Token tok = getToken(++x);
         if (tok.kind==GT) {
            --level;
            if (level==0) {
               return x+1;
            } else if (level < 0) {
               return -1; // this is probably a syntax error
            }
         } else if (tok.kind==RSIGNEDSHIFT) {
            level -= 2;
            if (level==0) {
               return x+1;
            } else if (level < 0) {
               return -1; // this is probably a syntax error
            }
         } else if (tok.kind==RUNSIGNEDSHIFT) {
            level -= 2;
            if (level==0) {
               return x+1;
            } else if (level < 0) {
               return -1; // this is probably a syntax error
            }
         } else if (tok.kind==LT) {
            level++;
         }
            
         if (tok.kind==RPAREN) {
            return -1;
         } else if (tok.kind==DOT) {
         } else if (tok.kind==HOOK || tok.kind==SUPER || tok.kind==EXTENDS || tok.kind==IDENTIFIER) {
            // do nothing
         }
      }
   }

            
   private boolean castEnd(Token tok) {
      return (   tok.kind==TILDE             || tok.kind==BANG            || tok.kind==LPAREN || tok.kind==IDENTIFIER
              || tok.kind==THIS              || tok.kind==SUPER           || tok.kind==NEW
              || tok.kind==INTEGER_LITERAL   || tok.kind==FLOATING_POINT_LITERAL
              || tok.kind==CHARACTER_LITERAL || tok.kind==STRING_LITERAL
              || tok.kind==TRUE              || tok.kind==FALSE           || tok.kind==NULL );
   }


  public static void main(String args[]) {
  }

}

PARSER_END(JavaParser)


/* WHITE SPACE */

SKIP :
{
 " " | "\t" | "\f"
 | "\u001a" { System.out.println("Warning: cntl-z found at end of file"); }: IN_ONLY_EOF
}

<IN_ONLY_EOF>
MORE :
{
    < ~[]  > { System.out.println("Error: no characters should follow cntl-z at end of file"); }
}

SPECIAL_TOKEN :
{
  "\n"
| "\r"
| "\r\n"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
|
  "/*<" : IN_CATEGORY_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : { <SINGLE_LINE_COMMENT:  (~["\r","\n","\u001a"])* ("\r"|"\n"|"\r\n")? > : DEFAULT }

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_CATEGORY_COMMENT>
SPECIAL_TOKEN :
{
  <CATEGORY_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT,IN_CATEGORY_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
| < ASSERT: "assert" > { if (!JavaParser.useAssert) matchedToken.kind = IDENTIFIER; } 
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
| < ENUM: "enum" > { if (!JavaParser.generics) matchedToken.kind = IDENTIFIER; }
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "$",
       "A"-"Z",
       "_",
       "a"-"z",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "0"-"9",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < VARARG: "..." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ATTRIBUTE: "@" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

ASTCompilationUnit CompilationUnit() :
{/*@bgen(jjtree) CompilationUnit */
    ASTCompilationUnit jjtn000 = new ASTCompilationUnit(this, JJTCOMPILATIONUNIT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) CompilationUnit */
  try {
/*@egen*/
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  tok=<EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.addSpecial("EOF", tok.specialToken);
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PackageDeclaration() :
{/*@bgen(jjtree) PackageDeclaration */
    ASTPackageDeclaration jjtn000 = new ASTPackageDeclaration(this, JJTPACKAGEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) PackageDeclaration */
  try {
/*@egen*/
  tok="package" {jjtn000.addSpecial("package", tok.specialToken);}
  Name()
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ImportDeclaration() :
{/*@bgen(jjtree) ImportDeclaration */
    ASTImportDeclaration jjtn000 = new ASTImportDeclaration(this, JJTIMPORTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok = null;
    Token specialPoint = null;
    int count = 0;
}
{/*@bgen(jjtree) ImportDeclaration */
  try {
/*@egen*/
  specialPoint="import" {jjtn000.addSpecial("import", specialPoint.specialToken);}
  [ specialPoint="static"
    {
      jjtn000.addSpecial("static", specialPoint.specialToken);
      jjtn000.setStaticImport(true);
    }
  ]
  Name()
    [
      specialPoint="." {jjtn000.addSpecial("period", specialPoint.specialToken);}
      tok="*" {jjtn000.addSpecial("star", tok.specialToken);}
    ]
  (
    specialPoint=";" 
    {
       count++;
       if (count==1) {
          jjtn000.addSpecial("semicolon", specialPoint.specialToken);
          jjtn000.setImportPackage(tok != null);
       }
    }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeDeclaration() :
{/*@bgen(jjtree) TypeDeclaration */
  ASTTypeDeclaration jjtn000 = new ASTTypeDeclaration(this, JJTTYPEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) TypeDeclaration */
  try {
/*@egen*/
  LOOKAHEAD( ("abstract" | "public" | "strictfp" | ("@" Annotation()) )* "@" "interface" )
  AnnotationTypeDeclaration()
|
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" | ("@" Annotation()) )* "class" )
  ClassDeclaration()
|
  LOOKAHEAD( ("public" | "protected" | "private" | "final" | ("@" Annotation()) )* "enum" )
  EnumDeclaration()
|
  InterfaceDeclaration()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{/*@bgen(jjtree) ClassDeclaration */
  ASTClassDeclaration jjtn000 = new ASTClassDeclaration(this, JJTCLASSDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tok;
  int count=0;
}
{/*@bgen(jjtree) ClassDeclaration */
  try {
/*@egen*/
  (
    (tok="abstract" {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"    {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="strictfp" {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="public"   {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="@" Annotation() {jjtn000.addSpecial("@."+count, tok.specialToken); count++;} )
  )*
  UnmodifiedClassDeclaration()
  [ ";" ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnmodifiedClassDeclaration() :
{/*@bgen(jjtree) UnmodifiedClassDeclaration */
    ASTUnmodifiedClassDeclaration jjtn000 = new ASTUnmodifiedClassDeclaration(this, JJTUNMODIFIEDCLASSDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token specialToken;
}
{/*@bgen(jjtree) UnmodifiedClassDeclaration */
  try {
/*@egen*/
  specialToken="class" {jjtn000.addSpecial("class", specialToken.specialToken);}
  (
    tok=<IDENTIFIER>
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  )
  [
    TypeParameters()
  ]
  [
    specialToken="extends"  {jjtn000.addSpecial("extends", specialToken.specialToken);}
    ClassOrInterfaceType()
  ]
  [
    specialToken="implements"  {jjtn000.addSpecial("implements", specialToken.specialToken);}
    GenericNameList()
  ]
  ClassBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void Annotation() :
{/*@bgen(jjtree) Annotation */
  ASTAnnotation jjtn000 = new ASTAnnotation(this, JJTANNOTATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token specialToken;
  Token tok;
}
{/*@bgen(jjtree) Annotation */
  try {
/*@egen*/
  //specialToken="@" {jjtThis.addSpecial("@", specialToken.specialToken);}
  Identifier()
  [ specialToken="(" {jjtn000.setMarkerAnnotation(false); jjtn000.addSpecial("begin", specialToken.specialToken);}
    [ LOOKAHEAD(2) MemberValuePairs() | MemberValue() ]
    specialToken=")" {jjtn000.addSpecial("end", specialToken.specialToken);}
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void MemberValuePairs() :
{/*@bgen(jjtree) MemberValuePairs */
  ASTMemberValuePairs jjtn000 = new ASTMemberValuePairs(this, JJTMEMBERVALUEPAIRS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token specialToken;
  int count=0;
}
{/*@bgen(jjtree) MemberValuePairs */
  try {
/*@egen*/
  MemberValuePair()
  ( specialToken="," {jjtn000.addSpecial("comma."+count++, specialToken.specialToken);}
     MemberValuePair()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void MemberValuePair() :
{/*@bgen(jjtree) MemberValuePair */
  ASTMemberValuePair jjtn000 = new ASTMemberValuePair(this, JJTMEMBERVALUEPAIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token specialToken;
}
{/*@bgen(jjtree) MemberValuePair */
  try {
/*@egen*/
  Identifier()
  specialToken="=" {jjtn000.addSpecial("=", specialToken.specialToken);}
  MemberValue()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void MemberValue() :
{/*@bgen(jjtree) MemberValue */
  ASTMemberValue jjtn000 = new ASTMemberValue(this, JJTMEMBERVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tok;
}
{/*@bgen(jjtree) MemberValue */
  try {
/*@egen*/
  tok="@" Annotation()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/  {jjtn000.addSpecial("@", tok.specialToken); }
|
  MemberValueArrayInitializer()
|
  ConditionalExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void MemberValueArrayInitializer() :
{/*@bgen(jjtree) MemberValueArrayInitializer */
  ASTMemberValueArrayInitializer jjtn000 = new ASTMemberValueArrayInitializer(this, JJTMEMBERVALUEARRAYINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token specialToken;
  int count=0;
}
{/*@bgen(jjtree) MemberValueArrayInitializer */
  try {
/*@egen*/
  specialToken="{" {jjtn000.addSpecial("{", specialToken.specialToken);}
  [ MemberValue()
    ( LOOKAHEAD(2)
      "," {jjtn000.addSpecial("comma."+count++, specialToken.specialToken);}
      MemberValue()
    )*
    [ "," ]
  ]
  specialToken="}"/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.addSpecial("}", specialToken.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void TypeParameters() :
{/*@bgen(jjtree) TypeParameters */
  ASTTypeParameters jjtn000 = new ASTTypeParameters(this, JJTTYPEPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token specialToken;
}
{/*@bgen(jjtree) TypeParameters */
  try {
/*@egen*/
  specialToken="<"  {
    if (!jdk1_5) {
      throw new ParseException("Type Parameters are only available in JDK 1.5 or later generics" );
    }
    jjtn000.addSpecial("<", specialToken.specialToken);
  }
  TypeParameterList() 
  specialToken=">"/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/  {jjtn000.addSpecial(">", specialToken.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeParameterList() :
{/*@bgen(jjtree) TypeParameterList */
    ASTTypeParameterList jjtn000 = new ASTTypeParameterList(this, JJTTYPEPARAMETERLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token generic;
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) TypeParameterList */
    try {
/*@egen*/
    (
      TypeParameter()
    )
    (
      tok="," {jjtn000.addSpecial("comma."+commaCount, tok.specialToken); commaCount++; }
      TypeParameter()
    )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void TypeParameter() :
{/*@bgen(jjtree) TypeParameter */
    ASTTypeParameter jjtn000 = new ASTTypeParameter(this, JJTTYPEPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) TypeParameter */
    try {
/*@egen*/
    (
      Identifier()
      [
        tok="extends" {jjtn000.addSpecial("extends.", tok.specialToken);}
        [ ClassOrInterfaceType() ]
        (
          tok="&" {jjtn000.addSpecial("and.", tok.specialToken);}
          [ ClassOrInterfaceType() ]
        )*
      ]
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ReferenceTypeList() :
{/*@bgen(jjtree) ReferenceTypeList */
    ASTReferenceTypeList jjtn000 = new ASTReferenceTypeList(this, JJTREFERENCETYPELIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token tok1;
    Token tok2;
    Token tok3;
    int commaCount = 0;
}
{/*@bgen(jjtree) ReferenceTypeList */
  try {
/*@egen*/
  tok="<" {
    if (!jdk1_5) {
      throw new ParseException("Generic reference types are only available in JDK 1.5 or later generics" );
    }
    jjtn000.addSpecial("<.", tok.specialToken);
  }
  ActualTypeArgument()
  (
    tok="," {jjtn000.addSpecial("comma."+commaCount, tok.specialToken); commaCount++; }
    ActualTypeArgument()
  )*
  (
    ( tok=">"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {
      jjtn000.addSpecial(">.", tok.specialToken);} ) |
       /* This is an horendous hack caused by ">", ">>" and ">>>" all being tokens,
        * but in this case also being used as one, two or three individual tokens
        * ">", ">" ">" and ">" ">" ">".
        */
    ( tok=">>"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { 
      jjtn000.addSpecial(">.", tok.specialToken);
      tok2=tok.next;
      tok1=Token.newToken(GT);
      tok.image=">";  tok.kind=GT;  tok.next=tok1;
      tok1.image=">"; tok1.kind=GT; tok1.next=tok2; } ) |
    ( tok=">>>"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
      jjtn000.addSpecial(">.", tok.specialToken);
      tok3=tok.next;
      tok1=Token.newToken(GT); tok2=Token.newToken(GT);
      tok.image=">";  tok.kind=GT;  tok.next=tok1;
      tok1.image=">"; tok1.kind=GT; tok1.next=tok2;
      tok2.image=">"; tok2.kind=GT; tok2.next=tok3; } )
   )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ActualTypeArgument() :
{/*@bgen(jjtree) ActualTypeArgument */
    ASTActualTypeArgument jjtn000 = new ASTActualTypeArgument(this, JJTACTUALTYPEARGUMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ActualTypeArgument */
  try {
/*@egen*/
  // Wildcard
  tok="?" {
      jjtn000.addSpecial("?", tok.specialToken);
      jjtn000.setWildcard();
    }
    [
      // WildCardBounds
      (
        tok="extends" { jjtn000.setExtends(); jjtn000.addSpecial("entends", tok.specialToken); }
        |
        tok="super" { jjtn000.setSuper(); jjtn000.addSpecial("super", tok.specialToken); }
      )
      ReferenceType()
    ]  

|
  ReferenceType()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void ClassBody() :
{/*@bgen(jjtree) ClassBody */
    ASTClassBody jjtn000 = new ASTClassBody(this, JJTCLASSBODY);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ClassBody */
  try {
/*@egen*/
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( ClassBodyDeclaration() )*
  tok="}"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("end", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NestedClassDeclaration() :
{/*@bgen(jjtree) NestedClassDeclaration */
    ASTNestedClassDeclaration jjtn000 = new ASTNestedClassDeclaration(this, JJTNESTEDCLASSDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count=0;
}
{/*@bgen(jjtree) NestedClassDeclaration */
  try {
/*@egen*/
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="abstract"  {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} ) |
    (tok="@" Annotation()  {jjtn000.addSpecial("@."+count, tok.specialToken); count++;} )
  )*
  UnmodifiedClassDeclaration()
  [ ";" ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

ASTJSPBody JSPBody() :
{/*@bgen(jjtree) JSPBody */
  ASTJSPBody jjtn000 = new ASTJSPBody(this, JJTJSPBODY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) JSPBody */
  try {
/*@egen*/
  ( ClassBodyDeclaration() )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ClassBodyDeclaration() :
{/*@bgen(jjtree) ClassBodyDeclaration */
  ASTClassBodyDeclaration jjtn000 = new ASTClassBodyDeclaration(this, JJTCLASSBODYDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ClassBodyDeclaration */
   try {
/*@egen*/
   (
     LOOKAHEAD( ["static" ] "{" )
     Initializer()
   |
     LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" | ("@" Annotation()) )*  "class" )
     NestedClassDeclaration()
   |
     LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" | ("@" Annotation()) )* "interface" )
     NestedInterfaceDeclaration()
   |
     LOOKAHEAD( ( "public" | "protected" | "private" | ( "@" Annotation()) )* [ TypeParameters() ] Name() [ TypeArguments() ] "(" )
     ConstructorDeclaration()
   |
     LOOKAHEAD( {methodDeclarationLookahead()} )
     MethodDeclaration()
   |
     LOOKAHEAD( ("static" | "public" | "protected" | "private" | "final" | ("@" Annotation()) )* "enum" )
     EnumDeclaration()
   |
     FieldDeclaration()
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

// enumeration from jdk1.5
void EnumDeclaration() :
{/*@bgen(jjtree) EnumDeclaration */
    ASTEnumDeclaration jjtn000 = new ASTEnumDeclaration(this, JJTENUMDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token specialToken;
    int elementCount = 0;
    int count = 0;
}
{/*@bgen(jjtree) EnumDeclaration */
  try {
/*@egen*/
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} ) |
    (tok="@" Annotation() {jjtn000.addSpecial("@."+count, tok.specialToken); count++;} )
  )*
  tok="enum" { jjtn000.addSpecial("enum", tok.specialToken); }
  Identifier()
  [
    specialToken="implements"  {jjtn000.addSpecial("implements", specialToken.specialToken);}
    GenericNameList()
  ]
  tok = "{"  {jjtn000.addSpecial("begin", tok.specialToken);}
  EnumElement()
  (
    tok = ","
    EnumElement()
    {
      jjtn000.addSpecial("comma." + elementCount, tok.specialToken);
      elementCount++;
    }
  )*
  [ ";" ( ClassBodyDeclaration() )* ]
  tok = "}" {jjtn000.addSpecial("end", tok.specialToken);}
  ( ";" )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Identifier() :
{/*@bgen(jjtree) Identifier */
    ASTIdentifier jjtn000 = new ASTIdentifier(this, JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) Identifier */
    try {
/*@egen*/
    tok = <IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void EnumElement() :
{/*@bgen(jjtree) EnumElement */
    ASTEnumElement jjtn000 = new ASTEnumElement(this, JJTENUMELEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) EnumElement */
    try {
/*@egen*/
    tok = <IDENTIFIER>
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
    [ Arguments() ]
    [ ClassBody() ]/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void AnnotationTypeDeclaration() :
{/*@bgen(jjtree) AnnotationTypeDeclaration */
    ASTAnnotationTypeDeclaration jjtn000 = new ASTAnnotationTypeDeclaration(this, JJTANNOTATIONTYPEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count=0;
}
{/*@bgen(jjtree) AnnotationTypeDeclaration */
  try {
/*@egen*/
   
  (
    ( tok="abstract"  {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    ( tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    ( tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    ( tok="@"
      (
         ( tok="interface"  {jjtn000.addSpecial("@interface", tok.specialToken);} ) |
         ( Annotation() {jjtn000.addSpecial("@."+count, tok.specialToken); count++;} )
      )
    )
  )*
  //tok="@" {jjtThis.addSpecial("@", tok.specialToken);}
  //tok="interface"  {jjtThis.addSpecial("interface", tok.specialToken);}
  tok=<IDENTIFIER>
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  tok="{" {jjtn000.addSpecial("}", tok.specialToken);}
  (
    AnnotationTypeMemberDeclaration()
    //[ tok=";" {jjtThis.addSpecial(";", tok.specialToken);} ]
  )*
  tok="}"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("}", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void AnnotationTypeMemberDeclaration() :
{/*@bgen(jjtree) AnnotationTypeMemberDeclaration */
    ASTAnnotationTypeMemberDeclaration jjtn000 = new ASTAnnotationTypeMemberDeclaration(this, JJTANNOTATIONTYPEMEMBERDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) AnnotationTypeMemberDeclaration */
  try {
/*@egen*/
  LOOKAHEAD( [ "public" | "abstract" ] Type() Identifier() "(" )
  AnnotationMethodDeclaration()
|
  LOOKAHEAD( [ "public" | "static" | "final" ] Type() )
  ConstantDeclaration()
|
  LOOKAHEAD( ["abstract" | "public" | "strictfp" ] "@" "interface" )
  AnnotationTypeDeclaration()
|
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" | ("@" Annotation()) )* "class" )
  ClassDeclaration()
|
  LOOKAHEAD( ("public" | "protected" | "private" | "final" | ("@" Annotation()) )* "enum" )
  EnumDeclaration()
|
  InterfaceDeclaration()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void AnnotationMethodDeclaration() :
{/*@bgen(jjtree) AnnotationMethodDeclaration */
    ASTAnnotationMethodDeclaration jjtn000 = new ASTAnnotationMethodDeclaration(this, JJTANNOTATIONMETHODDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) AnnotationMethodDeclaration */
  try {
/*@egen*/
  (
    (tok="public"       {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="abstract"     {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} )
  )*
  Type()
  Identifier()
  tok="(" {jjtn000.addSpecial("(", tok.specialToken);}
  tok=")" {jjtn000.addSpecial(")", tok.specialToken);}
  [
    tok="default" {jjtn000.addSpecial("detault", tok.specialToken);}
    MemberValue()
  ]
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void ConstantDeclaration() :
{/*@bgen(jjtree) ConstantDeclaration */
    ASTConstantDeclaration jjtn000 = new ASTConstantDeclaration(this, JJTCONSTANTDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) ConstantDeclaration */
  try {
/*@egen*/
  (
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal();  jjtn000.addSpecial("final", tok.specialToken);} )
  )
  Type() VariableDeclarator()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++; }
    VariableDeclarator()
  )*
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void InterfaceDeclaration() :
{/*@bgen(jjtree) InterfaceDeclaration */
    ASTInterfaceDeclaration jjtn000 = new ASTInterfaceDeclaration(this, JJTINTERFACEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count=0;
}
{/*@bgen(jjtree) InterfaceDeclaration */
  try {
/*@egen*/
  (
    (tok="abstract"  {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="@" Annotation() {jjtn000.addSpecial("@."+count, tok.specialToken); count++; } )
  )*
  UnmodifiedInterfaceDeclaration()
  [ ";" ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NestedInterfaceDeclaration() :
{/*@bgen(jjtree) NestedInterfaceDeclaration */
    ASTNestedInterfaceDeclaration jjtn000 = new ASTNestedInterfaceDeclaration(this, JJTNESTEDINTERFACEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count=0;
}
{/*@bgen(jjtree) NestedInterfaceDeclaration */
  try {
/*@egen*/
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="abstract"  {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} ) |
    (tok="@" Annotation() {jjtn000.addSpecial("@."+count, tok.specialToken); count++;} )
  )*
  UnmodifiedInterfaceDeclaration()
  [ ";" ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnmodifiedInterfaceDeclaration() :
{/*@bgen(jjtree) UnmodifiedInterfaceDeclaration */
    ASTUnmodifiedInterfaceDeclaration jjtn000 = new ASTUnmodifiedInterfaceDeclaration(this, JJTUNMODIFIEDINTERFACEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token specialToken;
    Token tok;
}
{/*@bgen(jjtree) UnmodifiedInterfaceDeclaration */
  try {
/*@egen*/
  specialToken="interface" {jjtn000.addSpecial("interface", specialToken.specialToken);}
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    {jjtn000.addSpecial("id", tok.specialToken);}
  }
  [ TypeParameters() ]
  [
    specialToken="extends" {jjtn000.addSpecial("extends", specialToken.specialToken);}
    GenericNameList()
  ]
  InterfaceBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceBody() :
{/*@bgen(jjtree) InterfaceBody */
        ASTInterfaceBody jjtn000 = new ASTInterfaceBody(this, JJTINTERFACEBODY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token tok;
}
{/*@bgen(jjtree) InterfaceBody */
  try {
/*@egen*/
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( InterfaceMemberDeclaration() )*
  tok="}"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("end", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InterfaceMemberDeclaration() :
{/*@bgen(jjtree) InterfaceMemberDeclaration */
  ASTInterfaceMemberDeclaration jjtn000 = new ASTInterfaceMemberDeclaration(this, JJTINTERFACEMEMBERDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) InterfaceMemberDeclaration */
  try {
/*@egen*/
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" | ("@" Annotation()) )* "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" | ("@" Annotation()) )* "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( {methodDeclarationLookahead()} )
  MethodDeclaration()
|
  FieldDeclaration()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FieldDeclaration() :
{/*@bgen(jjtree) FieldDeclaration */
    ASTFieldDeclaration jjtn000 = new ASTFieldDeclaration(this, JJTFIELDDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
    int count = 0;
}
{/*@bgen(jjtree) FieldDeclaration */
  try {
/*@egen*/
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="transient" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("transient", tok.specialToken);} ) |
    (tok="volatile"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("volatile", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal();  jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} ) |
    (tok="@" Annotation() {jjtn000.setPrivate(); jjtn000.addSpecial("@."+count, tok.specialToken); count++; } )
  )*
  Type() VariableDeclarator()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++; }
    VariableDeclarator()
  )*
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
  (";")*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclarator() :
{/*@bgen(jjtree) VariableDeclarator */
    ASTVariableDeclarator jjtn000 = new ASTVariableDeclarator(this, JJTVARIABLEDECLARATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) VariableDeclarator */
  try {
/*@egen*/
  VariableDeclaratorId()
  [
    tok="=" {jjtn000.addSpecial("equals", tok.specialToken);}
    VariableInitializer()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableDeclaratorId() :
{/*@bgen(jjtree) VariableDeclaratorId */
    ASTVariableDeclaratorId jjtn000 = new ASTVariableDeclaratorId(this, JJTVARIABLEDECLARATORID);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int arrayCount = 0;
}
{/*@bgen(jjtree) VariableDeclaratorId */
  try {
/*@egen*/
  tok=<IDENTIFIER>
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.setName(tok.image);
  }
  (
    "[" "]"
    {arrayCount++;}
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setArrayCount(arrayCount);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void VariableInitializer() :
{/*@bgen(jjtree) VariableInitializer */
  ASTVariableInitializer jjtn000 = new ASTVariableInitializer(this, JJTVARIABLEINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) VariableInitializer */
  try {
/*@egen*/
  ArrayInitializer()
|
  Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayInitializer() :
{/*@bgen(jjtree) ArrayInitializer */
    ASTArrayInitializer jjtn000 = new ASTArrayInitializer(this, JJTARRAYINITIALIZER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) ArrayInitializer */
  try {
/*@egen*/
  tok="{" { jjtn000.addSpecial("begin", tok.specialToken); }
  [
    VariableInitializer()
    (
      LOOKAHEAD(2)
      tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++;}
      VariableInitializer()
    )*
  ]
  [
    tok=","
    {
      jjtn000.addSpecial("comma." + commaCount, tok.specialToken);
      commaCount++;
      jjtn000.setFinalComma(true);
    }
  ]
  tok="}"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ { jjtn000.addSpecial("end", tok.specialToken); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodDeclaration() :
{/*@bgen(jjtree) MethodDeclaration */
    ASTMethodDeclaration jjtn000 = new ASTMethodDeclaration(this, JJTMETHODDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count=0;
}
{/*@bgen(jjtree) MethodDeclaration */
  try {
/*@egen*/
  (
    (tok="public"       {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected"    {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"      {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} ) |
    (tok="static"       {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="abstract"     {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"        {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="native"       {jjtn000.addModifier(tok.image); jjtn000.addSpecial("native", tok.specialToken);} ) |
    (tok="strictfp"     {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="synchronized" {jjtn000.setSynchronized(); jjtn000.addSpecial("synchronized", tok.specialToken);} ) |
    (tok="@" Annotation() {jjtn000.addSpecial("@."+count, tok.specialToken); count++; } )
  )*
  [ TypeParameters() ] ResultType() MethodDeclarator()
  [
    tok="throws" {jjtn000.addSpecial("throws", tok.specialToken);}
    NameList()
  ]
  (
    Block() |
    (tok=";"  {jjtn000.addSpecial("semicolon", tok.specialToken);})
  )
  //  Ignore the extra semicolons
  ( ";" )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MethodDeclarator() :
{/*@bgen(jjtree) MethodDeclarator */
    ASTMethodDeclarator jjtn000 = new ASTMethodDeclarator(this, JJTMETHODDECLARATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int arrayCount = 0;
}
{/*@bgen(jjtree) MethodDeclarator */
  try {
/*@egen*/
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }
  FormalParameters()
  (
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
  )*/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setArrayCount(arrayCount);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FormalParameters() :
{/*@bgen(jjtree) FormalParameters */
    ASTFormalParameters jjtn000 = new ASTFormalParameters(this, JJTFORMALPARAMETERS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) FormalParameters */
  try {
/*@egen*/
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  [
    FormalParameter()
    (
      tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
      FormalParameter()
      {commaCount++;}
    )*
  ]
  tok=")"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("end", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FormalParameter() :
{/*@bgen(jjtree) FormalParameter */
    ASTFormalParameter jjtn000 = new ASTFormalParameter(this, JJTFORMALPARAMETER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok = null;
    int count=0;
}
{/*@bgen(jjtree) FormalParameter */
  try {
/*@egen*/
  (
    (tok="@" Annotation()  {jjtn000.addSpecial("@."+count, tok.specialToken); count++; }) |
    (tok="final" {jjtn000.setUsingFinal(true); jjtn000.addSpecial("final", tok.specialToken); } )
  )*
  Type() 
  [ tok="..." {jjtn000.setVarArg(true); jjtn000.addSpecial("vararg", tok.specialToken);} ]
  VariableDeclaratorId()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConstructorDeclaration() :
{/*@bgen(jjtree) ConstructorDeclaration */
    ASTConstructorDeclaration jjtn000 = new ASTConstructorDeclaration(this, JJTCONSTRUCTORDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token mod;
    int count = 0;
}
{/*@bgen(jjtree) ConstructorDeclaration */
  try {
/*@egen*/
  (
    (mod="@" Annotation() {jjtn000.addSpecial("@."+count, mod.specialToken); count++; } ) |
    (mod="public"         {jjtn000.setPublic(); jjtn000.addSpecial("public", mod.specialToken);} ) |
    (mod="protected"      {jjtn000.setProtected(); jjtn000.addSpecial("protected", mod.specialToken);} ) |
    (mod="private"        {jjtn000.setPrivate(); jjtn000.addSpecial("private", mod.specialToken);} )
  )*
  [ TypeParameters() ]
  tok=<IDENTIFIER>
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.setName(tok.image);
  }
  [ TypeArguments() ]
  FormalParameters()
  [
    tok="throws" {jjtn000.addSpecial("throws", tok.specialToken);}
    NameList()
  ]
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
    [
      LOOKAHEAD(  ([TypeArguments()] "this" "(" )
                | ([<IDENTIFIER> "."] [ TypeArguments() ] tok="super" "(" ))
      ExplicitConstructorInvocation()
    ]
    ( BlockStatement() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
  [
    ";"
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExplicitConstructorInvocation() :
{/*@bgen(jjtree) ExplicitConstructorInvocation */
    ASTExplicitConstructorInvocation jjtn000 = new ASTExplicitConstructorInvocation(this, JJTEXPLICITCONSTRUCTORINVOCATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token semicolon;
    Token dot = null;
}
{/*@bgen(jjtree) ExplicitConstructorInvocation */
try {
/*@egen*/
(
  LOOKAHEAD([TypeArguments()] "this" "(" )
  [ TypeArguments() ]   // new
  tok="this" Arguments() semicolon=";" {((ASTExplicitConstructorInvocation)jjtn000).setIsThis();}
|
  [ LOOKAHEAD(PrimaryExpression() "." ) PrimaryExpression() dot="." { jjtn000.addSpecial(".", dot.specialToken); } ]
  [ Identifier() dot="." { jjtn000.addSpecial(".2", dot.specialToken); } ]
  [ TypeArguments() ]
  tok="super" Arguments() semicolon=";"
  {
    ((ASTExplicitConstructorInvocation)jjtn000).setIsSuper();
  }
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("explicit", tok.specialToken);
    jjtn000.addSpecial("semicolon", semicolon.specialToken);
  }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void Initializer() :
{/*@bgen(jjtree) Initializer */
    ASTInitializer jjtn000 = new ASTInitializer(this, JJTINITIALIZER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok = null;
}
{/*@bgen(jjtree) Initializer */
  try {
/*@egen*/
  [ tok = "static" ] Block()
  {
    jjtn000.setUsingStatic(tok != null);
    if (tok != null) {
      jjtn000.addSpecial("static", tok.specialToken);
    }
  }
  ( ";" )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/*
 * Type, name and expression syntax follows.
 */


void Type():
{/*@bgen(jjtree) Type */
  ASTType jjtn000 = new ASTType(this, JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) Type */
  try {
/*@egen*/
  (
    LOOKAHEAD(2)
    ReferenceType()
  |
    PrimitiveType()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReferenceType() :
{/*@bgen(jjtree) ReferenceType */
    ASTReferenceType jjtn000 = new ASTReferenceType(this, JJTREFERENCETYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    int arrayCount = 0;
    Token tok;
}
{/*@bgen(jjtree) ReferenceType */
  try {
/*@egen*/
  (
    (
      ClassOrInterfaceType()
      (
        tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
        tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
        {arrayCount++;}
      )*
    )
    |
    (
      PrimitiveType()
      (
        tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
        tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
        {arrayCount++;}
      )+
    )
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setArrayCount(arrayCount);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TypeArguments() :
{/*@bgen(jjtree) TypeArguments */
    ASTTypeArguments jjtn000 = new ASTTypeArguments(this, JJTTYPEARGUMENTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token tok1;
    Token tok2;
    Token tok3;
    int commaCount = 0;
}
{/*@bgen(jjtree) TypeArguments */
  try {
/*@egen*/
  tok="<" {
    if (!jdk1_5) {
      throw new ParseException("Generic type arguments are only available in JDK 1.5 or later generics" );
    }
    jjtn000.addSpecial("<.", tok.specialToken);
  }
  ActualTypeArgument()
  (
    LOOKAHEAD(2)
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++; }
    ActualTypeArgument()
  )*
  (
    (tok=">"/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ {jjtn000.addSpecial(">.", tok.specialToken);} ) |
     
    /* This is an horendous hack caused by ">", ">>" and ">>>" all being tokens,
     * but in this case also being used as one, two or three individual tokens
     * ">", ">" ">" and ">" ">" ">".
     */
    ( tok=">>"/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/ { 
        jjtn000.addSpecial(">.", tok.specialToken);
        tok2=tok.next;
        tok1=Token.newToken(GT);
        tok.image=">";  tok.kind=GT;  tok.next=tok1;
        tok1.image=">"; tok1.kind=GT; tok1.next=tok2; } ) |
    ( tok=">>>"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ {
        jjtn000.addSpecial(">.", tok.specialToken);
        tok3=tok.next;
        tok1=Token.newToken(GT); tok2=Token.newToken(GT);
        tok.image=">";  tok.kind=GT;  tok.next=tok1;
        tok1.image=">"; tok1.kind=GT; tok1.next=tok2;
        tok2.image=">"; tok2.kind=GT; tok2.next=tok3; } )
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrimitiveType() :
{/*@bgen(jjtree) PrimitiveType */
    ASTPrimitiveType jjtn000 = new ASTPrimitiveType(this, JJTPRIMITIVETYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) PrimitiveType */
try {
/*@egen*/
(
    tok="boolean"
  |
    tok="char"
  |
    tok="byte"
  |
    tok="short"
  |
    tok="int"
  |
    tok="long"
  |
    tok="float"
  |
    tok="double"
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("primitive", tok.specialToken);
  }/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void ResultType() :
{/*@bgen(jjtree) ResultType */
    ASTResultType jjtn000 = new ASTResultType(this, JJTRESULTTYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ResultType */
  try {
/*@egen*/
  (tok="void"/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.addSpecial("primitive", tok.specialToken);})
|
  Type()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{/*@bgen(jjtree) Name */
    ASTName jjtn000 = new ASTName(this, JJTNAME);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token period;
    int count = 0;
}
{/*@bgen(jjtree) Name */
  try {
/*@egen*/
  tok=<IDENTIFIER> {jjtn000.addSpecial("id" + count, tok.specialToken);}
  {
    if (TESTING) {
        jjtn000.testingOnly__setBeginLine( tok.beginLine);
        jjtn000.testingOnly__setBeginColumn( tok.beginColumn);
    }
    jjtn000.addNamePart(tok.image);
    count++;
  }
  (
    LOOKAHEAD(2)
    period="."
    tok=<IDENTIFIER>
    {
      jjtn000.addNamePart(tok.image);
      jjtn000.addSpecial("period" + count, period.specialToken);
      jjtn000.addSpecial("id" + count, tok.specialToken);
      count++;
    }
  )*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



void ClassOrInterfaceType() :
{/*@bgen(jjtree) ClassOrInterfaceType */
    ASTClassOrInterfaceType jjtn000 = new ASTClassOrInterfaceType(this, JJTCLASSORINTERFACETYPE);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token period;
    int count = 0;
}
{/*@bgen(jjtree) ClassOrInterfaceType */
  try {
/*@egen*/
  Identifier()
  [ TypeArguments() ]
  (
    LOOKAHEAD( "." <IDENTIFIER> )
    period="."
    Identifier()
    [ TypeArguments() ]
    {
      jjtn000.addSpecial("period." + count, period.specialToken);
      count++;
    }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void NameList() :
{/*@bgen(jjtree) NameList */
    ASTNameList jjtn000 = new ASTNameList(this, JJTNAMELIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) NameList */
  try {
/*@egen*/
  Name()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
    Name()
    {commaCount++;}
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void GenericNameList() :
{/*@bgen(jjtree) GenericNameList */
    ASTGenericNameList jjtn000 = new ASTGenericNameList(this, JJTGENERICNAMELIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) GenericNameList */
  try {
/*@egen*/
  ClassOrInterfaceType()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
    ClassOrInterfaceType()
    {commaCount++;}
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(this, JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssignmentOperator() :
{/*@bgen(jjtree) AssignmentOperator */
    ASTAssignmentOperator jjtn000 = new ASTAssignmentOperator(this, JJTASSIGNMENTOPERATOR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) AssignmentOperator */
  try {
/*@egen*/
  (
    tok="="    |
    tok="*="   |
    tok="/="   |
    tok="%="   |
    tok="+="   |
    tok="-="   |
    tok="<<="  |
    tok=">>="  |
    tok=">>>=" |
    tok="&="   |
    tok="^="   |
    tok="|="
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("operator", tok.specialToken);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConditionalExpression() :
{/*@bgen(jjtree) ConditionalExpression */
    ASTConditionalExpression jjtn000 = new ASTConditionalExpression(this, JJTCONDITIONALEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ConditionalExpression */
  try {
/*@egen*/
  ConditionalOrExpression()
  [
    tok="?" {jjtn000.addSpecial("?", tok.specialToken);}
    Expression()
    tok=":" {jjtn000.addSpecial(":", tok.specialToken);}
    ConditionalExpression()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConditionalOrExpression() :
{/*@bgen(jjtree) ConditionalOrExpression */
    ASTConditionalOrExpression jjtn000 = new ASTConditionalOrExpression(this, JJTCONDITIONALOREXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) ConditionalOrExpression */
  try {
/*@egen*/
  ConditionalAndExpression()
  (
    tok="||" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    ConditionalAndExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ConditionalAndExpression() :
{/*@bgen(jjtree) ConditionalAndExpression */
    ASTConditionalAndExpression jjtn000 = new ASTConditionalAndExpression(this, JJTCONDITIONALANDEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) ConditionalAndExpression */
  try {
/*@egen*/
  InclusiveOrExpression()
  (
    tok="&&" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    InclusiveOrExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InclusiveOrExpression() :
{/*@bgen(jjtree) InclusiveOrExpression */
    ASTInclusiveOrExpression jjtn000 = new ASTInclusiveOrExpression(this, JJTINCLUSIVEOREXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) InclusiveOrExpression */
  try {
/*@egen*/
  ExclusiveOrExpression()
  (
    tok="|" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    ExclusiveOrExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ExclusiveOrExpression() :
{/*@bgen(jjtree) ExclusiveOrExpression */
    ASTExclusiveOrExpression jjtn000 = new ASTExclusiveOrExpression(this, JJTEXCLUSIVEOREXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) ExclusiveOrExpression */
  try {
/*@egen*/
  AndExpression()
  (
    tok="^" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    AndExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AndExpression() :
{/*@bgen(jjtree) AndExpression */
    ASTAndExpression jjtn000 = new ASTAndExpression(this, JJTANDEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) AndExpression */
  try {
/*@egen*/
  EqualityExpression()
  (
    tok="&" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    EqualityExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EqualityExpression() :
{/*@bgen(jjtree) EqualityExpression */
    ASTEqualityExpression jjtn000 = new ASTEqualityExpression(this, JJTEQUALITYEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) EqualityExpression */
  try {
/*@egen*/
  InstanceOfExpression()
  (
    ( tok="==" | tok="!=" )
    InstanceOfExpression()
    {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
    }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void InstanceOfExpression() :
{/*@bgen(jjtree) InstanceOfExpression */
    ASTInstanceOfExpression jjtn000 = new ASTInstanceOfExpression(this, JJTINSTANCEOFEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) InstanceOfExpression */
  try {
/*@egen*/
  RelationalExpression()
  [
    tok="instanceof"
    ReferenceType()
    {jjtn000.addSpecial("operator.0", tok.specialToken);}
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void RelationalExpression() :
{/*@bgen(jjtree) RelationalExpression */
    ASTRelationalExpression jjtn000 = new ASTRelationalExpression(this, JJTRELATIONALEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) RelationalExpression */
  try {
/*@egen*/
  ShiftExpression()
  (
    (
      tok="<"  |
      tok=">"  |
      tok="<=" |
      tok=">="
    )
    {
      jjtn000.addName(tok.image);
      jjtn000.addSpecial("operator." + count, tok.specialToken);
      count++;
    }
    ShiftExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ShiftExpression() :
{/*@bgen(jjtree) ShiftExpression */
    ASTShiftExpression jjtn000 = new ASTShiftExpression(this, JJTSHIFTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) ShiftExpression */
  try {
/*@egen*/
  AdditiveExpression()
    (
      (
        tok="<<" |
        tok=">>" |
        tok=">>>"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      AdditiveExpression()
    )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AdditiveExpression() :
{/*@bgen(jjtree) AdditiveExpression */
    ASTAdditiveExpression jjtn000 = new ASTAdditiveExpression(this, JJTADDITIVEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) AdditiveExpression */
  try {
/*@egen*/
  MultiplicativeExpression()
    (
      (
        tok="+" |
        tok="-"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      MultiplicativeExpression()
    )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MultiplicativeExpression() :
{/*@bgen(jjtree) MultiplicativeExpression */
    ASTMultiplicativeExpression jjtn000 = new ASTMultiplicativeExpression(this, JJTMULTIPLICATIVEEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) MultiplicativeExpression */
  try {
/*@egen*/
  UnaryExpression()
    (
      (
        tok="*" |
        tok="/" |
        tok="%"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      UnaryExpression()
    )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnaryExpression() :
{/*@bgen(jjtree) UnaryExpression */
    ASTUnaryExpression jjtn000 = new ASTUnaryExpression(this, JJTUNARYEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) UnaryExpression */
  try {
/*@egen*/
  (
    (
      tok="+" |
      tok="-"
    )
    UnaryExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  )
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PreIncrementExpression() :
{/*@bgen(jjtree) PreIncrementExpression */
    ASTPreIncrementExpression jjtn000 = new ASTPreIncrementExpression(this, JJTPREINCREMENTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) PreIncrementExpression */
  try {
/*@egen*/
  tok="++" PrimaryExpression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.addSpecial("operator", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PreDecrementExpression() :
{/*@bgen(jjtree) PreDecrementExpression */
    ASTPreDecrementExpression jjtn000 = new ASTPreDecrementExpression(this, JJTPREDECREMENTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) PreDecrementExpression */
  try {
/*@egen*/
  tok="--" PrimaryExpression()/*@bgen(jjtree)*/
                               {
                                 jjtree.closeNodeScope(jjtn000, true);
                                 jjtc000 = false;
                               }
/*@egen*/ {jjtn000.addSpecial("operator", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UnaryExpressionNotPlusMinus() :
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
    ASTUnaryExpressionNotPlusMinus jjtn000 = new ASTUnaryExpressionNotPlusMinus(this, JJTUNARYEXPRESSIONNOTPLUSMINUS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) UnaryExpressionNotPlusMinus */
  try {
/*@egen*/
  LOOKAHEAD( {castLookahead()} )
  CastExpression()
|
  (
    (
      tok="~" |
      tok="!"
    )
    UnaryExpression()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  )
|
  PostfixExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void PostfixExpression() :
{/*@bgen(jjtree) PostfixExpression */
    ASTPostfixExpression jjtn000 = new ASTPostfixExpression(this, JJTPOSTFIXEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok = null;
}
{/*@bgen(jjtree) PostfixExpression */
  try {
/*@egen*/
  PrimaryExpression() [ tok="++" | tok="--" ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tok != null) {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CastExpression() :
{/*@bgen(jjtree) CastExpression */
    ASTCastExpression jjtn000 = new ASTCastExpression(this, JJTCASTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) CastExpression */
  try {
/*@egen*/
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  Type()
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
  
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  // fix bug 758816 UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{/*@bgen(jjtree) PrimaryExpression */
  ASTPrimaryExpression jjtn000 = new ASTPrimaryExpression(this, JJTPRIMARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrimaryExpression */
  try {
/*@egen*/
  PrimaryPrefix()
  ( LOOKAHEAD( ("." "this") | ("." "super") | ("." "new") | "(" | "[" | ( "." "<") | ("." [ ReferenceTypeList() ] <IDENTIFIER>) | ReferenceTypeList() )
    PrimarySuffix()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void PrimaryPrefix() :
{/*@bgen(jjtree) PrimaryPrefix */
  ASTPrimaryPrefix jjtn000 = new ASTPrimaryPrefix(this, JJTPRIMARYPREFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tok;
  Token superTok;
  String name = "";
  int count = 0;
}
{/*@bgen(jjtree) PrimaryPrefix */
  try {
/*@egen*/
  Literal()
|
  tok="this"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setUsesThisModifier();
    jjtn000.setName("this");
    jjtn000.addSpecial("this", tok.specialToken);
  }
|
  LOOKAHEAD( (<IDENTIFIER> ".")* "super" "." )
  (
     tok=<IDENTIFIER> "."
     {
     	name = name + tok.image + ".";
	    jjtn000.addSpecial("this." + count, tok.specialToken);
	    count++;
     }
  )*
  superTok="super" "." tok=<IDENTIFIER>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setUsesSuperModifier();
    jjtn000.setCount(count);
    name = name + "super." + tok.image;
    jjtn000.setName(name);
    jjtn000.addSpecial("this", superTok.specialToken);
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  Expression()
  tok=")"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("end", tok.specialToken);}
|
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/ //? ClassOrInterfaceType()
}

void PrimarySuffix() :
{/*@bgen(jjtree) PrimarySuffix */
    ASTPrimarySuffix jjtn000 = new ASTPrimarySuffix(this, JJTPRIMARYSUFFIX);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token tok1;
    Token tok2;
    Token tok3;
    Token generic;
}
{/*@bgen(jjtree) PrimarySuffix */
  try {
/*@egen*/
  tok="." {jjtn000.addSpecial("dot", tok.specialToken);}
  (
    tok="this"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
       jjtn000.setName("this");
       jjtn000.addSpecial("id", tok.specialToken);
    }
  |
    tok="super"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.setName("super");
      jjtn000.addSpecial("id", tok.specialToken);
    }
  |
    AllocationExpression()
  |
    [ 
      ReferenceTypeList()
    ]
    tok=<IDENTIFIER>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  )
|
  tok="[" {jjtn000.addSpecial("[", tok.specialToken);}
  Expression()
  tok="]"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("]", tok.specialToken);}
|
  Arguments()/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {((ASTPrimarySuffix)jjtn000).setIsArguments();}
|
  ReferenceTypeList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Literal() :
{/*@bgen(jjtree) Literal */
    ASTLiteral jjtn000 = new ASTLiteral(this, JJTLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok = null;
}
{/*@bgen(jjtree) Literal */
  try {
/*@egen*/
  (
    tok=<INTEGER_LITERAL> |
    tok=<FLOATING_POINT_LITERAL> |
    tok=<CHARACTER_LITERAL> |
    tok=<STRING_LITERAL> |
    BooleanLiteral() |
    NullLiteral()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    if (tok != null) {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BooleanLiteral() :
{/*@bgen(jjtree) BooleanLiteral */
    ASTBooleanLiteral jjtn000 = new ASTBooleanLiteral(this, JJTBOOLEANLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) BooleanLiteral */
  try {
/*@egen*/
  (
    tok="true" |
    tok="false"
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void NullLiteral() :
{/*@bgen(jjtree) NullLiteral */
    ASTNullLiteral jjtn000 = new ASTNullLiteral(this, JJTNULLLITERAL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) NullLiteral */
  try {
/*@egen*/
  tok="null"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.addSpecial("id", tok.specialToken);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Arguments() :
{/*@bgen(jjtree) Arguments */
    ASTArguments jjtn000 = new ASTArguments(this, JJTARGUMENTS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) Arguments */
  try {
/*@egen*/
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  [ ArgumentList() ] [ tok=","  {jjtn000.addSpecial("comma", tok.specialToken);} ]
  tok=")"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("end", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArgumentList() :
{/*@bgen(jjtree) ArgumentList */
    ASTArgumentList jjtn000 = new ASTArgumentList(this, JJTARGUMENTLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) ArgumentList */
  try {
/*@egen*/
  Expression()
  (
    LOOKAHEAD({expressionLookahead()})
    tok=","  {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++;}
    Expression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AllocationExpression() :
{/*@bgen(jjtree) AllocationExpression */
    ASTAllocationExpression jjtn000 = new ASTAllocationExpression(this, JJTALLOCATIONEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) AllocationExpression */
  try {
/*@egen*/

  tok="new" {jjtn000.addSpecial("id", tok.specialToken);}
  (
    LOOKAHEAD(ClassOrInterfaceType())
    ClassOrInterfaceType()
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassBody() ]
    )
  |
    PrimitiveType()
    ArrayDimsAndInits()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{/*@bgen(jjtree) ArrayDimsAndInits */
    ASTArrayDimsAndInits jjtn000 = new ASTArrayDimsAndInits(this, JJTARRAYDIMSANDINITS);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int arrayCount = 0;
}
{/*@bgen(jjtree) ArrayDimsAndInits */
  try {
/*@egen*/
  (
    // FIXME? LOOKAHEAD looks wrong??
    LOOKAHEAD(2)
    (
      LOOKAHEAD(2)
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      Expression()
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )+
    (
      LOOKAHEAD(4)
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )*
   |
    (
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )+
    ArrayInitializer()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setArrayCount(arrayCount);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/*
 * Statement syntax follows.
 */

void Statement() :
{/*@bgen(jjtree) Statement */
    ASTStatement jjtn000 = new ASTStatement(this, JJTSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) Statement */
  try {
/*@egen*/
  AssertionStatement()
|
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() tok=";"/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LabeledStatement() :
{/*@bgen(jjtree) LabeledStatement */
    ASTLabeledStatement jjtn000 = new ASTLabeledStatement(this, JJTLABELEDSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token colon;
}
{/*@bgen(jjtree) LabeledStatement */
  try {
/*@egen*/
  tok=<IDENTIFIER> colon=":" Statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.addSpecial("colon", colon.specialToken);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Block() :
{/*@bgen(jjtree) Block */
    ASTBlock jjtn000 = new ASTBlock(this, JJTBLOCK);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) Block */
  try {
/*@egen*/
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( BlockStatement() )*
  tok="}"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("end", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BlockStatement() :
{/*@bgen(jjtree) BlockStatement */
    ASTBlockStatement jjtn000 = new ASTBlockStatement(this, JJTBLOCKSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int count = 0;
}
{/*@bgen(jjtree) BlockStatement */
  try {
/*@egen*/
  LOOKAHEAD( ( "final" | ("@" Annotation()) )* Type() <IDENTIFIER>)
  LocalVariableDeclaration()
  tok=";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  LOOKAHEAD( ( "final" | ("@" Annotation()) )* Name() "<" )
  LocalVariableDeclaration()
  tok=";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  Statement()
|
  LOOKAHEAD( ( "final" | ("@" Annotation()) )* "class")
  (
    (tok="@" Annotation() { jjtn000.addSpecial("@."+count, tok.specialToken); count++; }) |
    (tok="final" { jjtn000.addSpecial("final", tok.specialToken);  jjtn000.setFinal(true); } )
  )*
  UnmodifiedClassDeclaration()
|
  LOOKAHEAD([ "final" ] "interface")
  (
    (tok="@" Annotation() { jjtn000.addSpecial("@."+count, tok.specialToken); count++; }) |
    (tok="final" { jjtn000.addSpecial("final", tok.specialToken); jjtn000.setFinal(true); } )
  )*
  UnmodifiedInterfaceDeclaration()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void LocalVariableDeclaration() :
{/*@bgen(jjtree) LocalVariableDeclaration */
    ASTLocalVariableDeclaration jjtn000 = new ASTLocalVariableDeclaration(this, JJTLOCALVARIABLEDECLARATION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok = null;
    int commaCount = 0;
    int count = 0;
}
{/*@bgen(jjtree) LocalVariableDeclaration */
  try {
/*@egen*/
  ( 
    (tok="@" Annotation() { jjtn000.addSpecial("@."+count, tok.specialToken); count++; }) |
    (tok="final" { jjtn000.setUsingFinal(true); jjtn000.addSpecial("final", tok.specialToken); } )
  )*
  Type()
  VariableDeclarator()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++;}
    VariableDeclarator()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void EmptyStatement() :
{/*@bgen(jjtree) EmptyStatement */
    ASTEmptyStatement jjtn000 = new ASTEmptyStatement(this, JJTEMPTYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) EmptyStatement */
  try {
/*@egen*/
  tok=";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{/*@bgen(jjtree) StatementExpression */
    ASTStatementExpression jjtn000 = new ASTStatementExpression(this, JJTSTATEMENTEXPRESSION);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) StatementExpression */
  try {
/*@egen*/
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    tok="++" {jjtn000.setName("++"); jjtn000.addSpecial("id", tok.specialToken);}
  |
    tok="--" {jjtn000.setName("--"); jjtn000.addSpecial("id", tok.specialToken);}
  |
    AssignmentOperator() Expression()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SwitchStatement() :
{/*@bgen(jjtree) SwitchStatement */
    ASTSwitchStatement jjtn000 = new ASTSwitchStatement(this, JJTSWITCHSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) SwitchStatement */
  try {
/*@egen*/
  tok="switch" {jjtn000.addSpecial("switch", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  tok="{" {jjtn000.addSpecial("beginBlock", tok.specialToken);}
    ( SwitchLabel() ( BlockStatement() )* )*
  tok="}"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("endBlock", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SwitchLabel() :
{/*@bgen(jjtree) SwitchLabel */
    ASTSwitchLabel jjtn000 = new ASTSwitchLabel(this, JJTSWITCHLABEL);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    Token colon;
}
{/*@bgen(jjtree) SwitchLabel */
try {
/*@egen*/
(
  tok="case" Expression() colon=":"
|
  tok="default" colon=":"
)/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.addSpecial("colon", colon.specialToken);
  }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{/*@bgen(jjtree) IfStatement */
    ASTIfStatement jjtn000 = new ASTIfStatement(this, JJTIFSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) IfStatement */
  try {
/*@egen*/
  tok="if" {jjtn000.addSpecial("if", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()
  [
    LOOKAHEAD(1)
    tok="else" {jjtn000.setHasElse(); jjtn000.addSpecial("else", tok.specialToken);}
    Statement()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void WhileStatement() :
{/*@bgen(jjtree) WhileStatement */
    ASTWhileStatement jjtn000 = new ASTWhileStatement(this, JJTWHILESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) WhileStatement */
  try {
/*@egen*/
  tok="while" {jjtn000.addSpecial("while", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


void ForStatement() :
{/*@bgen(jjtree) ForStatement */
    ASTForStatement jjtn000 = new ASTForStatement(this, JJTFORSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ForStatement */
  try {
/*@egen*/
  tok="for" {jjtn000.addSpecial("for", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  (
      
    LOOKAHEAD( {forLookahead()} )
    ( 
      LocalVariableDeclaration()
      tok=":" {jjtn000.addSpecial("loopover", tok.specialToken);}
      Expression()
    )
    |
    (
      [ ForInit() ]
      tok=";" {jjtn000.addSpecial("init", tok.specialToken);}
      [ Expression() ]
      tok=";" {jjtn000.addSpecial("test", tok.specialToken);}
      [ ForUpdate() ]
    )
  )

  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForInit() :
{/*@bgen(jjtree) ForInit */
  ASTForInit jjtn000 = new ASTForInit(this, JJTFORINIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForInit */
  try {
/*@egen*/
  LOOKAHEAD( ( "final" | ("@" Annotation()) )* ( Type() <IDENTIFIER> | Name() "<" ) )
  (
    LocalVariableDeclaration()
  )
|
  (
    StatementExpressionList()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



void DoStatement() :
{/*@bgen(jjtree) DoStatement */
    ASTDoStatement jjtn000 = new ASTDoStatement(this, JJTDOSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) DoStatement */
  try {
/*@egen*/
  tok="do" {jjtn000.addSpecial("do", tok.specialToken);}
  Statement()
  tok="while" {jjtn000.addSpecial("while", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}



void StatementExpressionList() :
{/*@bgen(jjtree) StatementExpressionList */
    ASTStatementExpressionList jjtn000 = new ASTStatementExpressionList(this, JJTSTATEMENTEXPRESSIONLIST);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int commaCount = 0;
}
{/*@bgen(jjtree) StatementExpressionList */
  try {
/*@egen*/
  StatementExpression()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);  commaCount++;}
    StatementExpression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ForUpdate() :
{/*@bgen(jjtree) ForUpdate */
  ASTForUpdate jjtn000 = new ASTForUpdate(this, JJTFORUPDATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ForUpdate */
  try {
/*@egen*/
  StatementExpressionList()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void BreakStatement() :
{/*@bgen(jjtree) BreakStatement */
    ASTBreakStatement jjtn000 = new ASTBreakStatement(this, JJTBREAKSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) BreakStatement */
  try {
/*@egen*/
  tok="break" {jjtn000.addSpecial("break", tok.specialToken);}
  [ tok=<IDENTIFIER> {jjtn000.setName(tok.image); jjtn000.addSpecial("id", tok.specialToken);}]
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void ContinueStatement() :
{/*@bgen(jjtree) ContinueStatement */
    ASTContinueStatement jjtn000 = new ASTContinueStatement(this, JJTCONTINUESTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ContinueStatement */
  try {
/*@egen*/
  tok="continue" {jjtn000.addSpecial("continue", tok.specialToken);}
  [ tok=<IDENTIFIER> {jjtn000.setName(tok.image); jjtn000.addSpecial("id", tok.specialToken);}]
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ReturnStatement() :
{/*@bgen(jjtree) ReturnStatement */
    ASTReturnStatement jjtn000 = new ASTReturnStatement(this, JJTRETURNSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ReturnStatement */
  try {
/*@egen*/
  tok="return" {jjtn000.addSpecial("return", tok.specialToken);}
  [ Expression() ]
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ThrowStatement() :
{/*@bgen(jjtree) ThrowStatement */
    ASTThrowStatement jjtn000 = new ASTThrowStatement(this, JJTTHROWSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) ThrowStatement */
  try {
/*@egen*/
  tok="throw" {jjtn000.addSpecial("throw", tok.specialToken);}
  Expression()
  tok=";"/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.addSpecial("semicolon", tok.specialToken);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void SynchronizedStatement() :
{/*@bgen(jjtree) SynchronizedStatement */
    ASTSynchronizedStatement jjtn000 = new ASTSynchronizedStatement(this, JJTSYNCHRONIZEDSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) SynchronizedStatement */
  try {
/*@egen*/
  tok="synchronized"  {jjtn000.addSpecial("synchronized", tok.specialToken);}
  tok="("  {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")"  {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Block()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{/*@bgen(jjtree) TryStatement */
    ASTTryStatement jjtn000 = new ASTTryStatement(this, JJTTRYSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
    int catchCount = 0;
}
{/*@bgen(jjtree) TryStatement */
  try {
/*@egen*/
  tok="try"  {jjtn000.addSpecial("try", tok.specialToken);}
  Block()
  (
    tok="catch"  {jjtn000.setHasCatch(); jjtn000.addSpecial("catch" + catchCount, tok.specialToken);}
    tok="("  {jjtn000.addSpecial("beginExpr" + catchCount, tok.specialToken);}
    FormalParameter()
    tok=")"  {jjtn000.addSpecial("endExpr" + catchCount, tok.specialToken);}
    Block()
    {catchCount++;}
  )*
  [
    tok="finally"  {jjtn000.setHasFinally(); jjtn000.addSpecial("finally", tok.specialToken);}
    Block()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void AssertionStatement() :
{/*@bgen(jjtree) AssertionStatement */
    ASTAssertionStatement jjtn000 = new ASTAssertionStatement(this, JJTASSERTIONSTATEMENT);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token tok;
}
{/*@bgen(jjtree) AssertionStatement */
  try {
/*@egen*/
  tok = "assert" {
    if (!jdk1_4) {
      System.err.println("WARNING: assert declared in pre-jdk 1.4 target");
    }
    jjtn000.addSpecial("assert", tok.specialToken);
  }
  Expression()
  [
	  tok=":"  {jjtn000.addSpecial("colon", tok.specialToken);}
	  Expression()
  ]
  tok=";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.addSpecial("semicolon", tok.specialToken);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


