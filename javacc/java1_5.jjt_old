/**
 *
 * Copyright (C) 1996, 1997 Sun Microsystems Inc.
 *
 * Use of this file and the system it is part of is constrained by the
 * file COPYRIGHT in the root directory of this system.  You may, however,
 * make any modifications you wish to this file.
 *
 * Java files generated by running JavaCC on this file (or modified versions
 * of this file) may be used in exactly the same manner as Java files
 * generated from any grammar developed by you.
 *
 * Author: Sriram Sankar
 * Date: 3/5/97
 * Author: Mike Atkinson - jdk 1.5 additions
 * Date: 19 June 2003
 *
 * This file contains a Java grammar and actions that implement a front-end.
 *
 */

options {
  STATIC=false;
  NODE_USES_PARSER=true;
  JAVA_UNICODE_ESCAPE=false;
  UNICODE_INPUT=true;
  VISITOR=true;
  MULTI=true;
  DEBUG_PARSER=false;
  DEBUG_LOOKAHEAD=false;
  DEBUG_TOKEN_MANAGER=false;
}

PARSER_BEGIN(JavaParser)

public class JavaParser {

  private static final boolean TESTING = true;
  private static String target_jdk = "1.5.0";
  private static boolean jdk1_4 = true;
  private static boolean jdk1_5 = true;
  private static boolean generics = true;
  private static boolean useAssert = true;

  public static void setTargetJDK(String target) {
     target_jdk = target;
     jdk1_4 = "1.4.0".compareTo(target_jdk) <= 0;
     jdk1_5 = "1.5.0".compareTo(target_jdk) <= 0;
     generics = "1.5.0".compareTo(target_jdk) <= 0;
     useAssert = "1.4.0".compareTo(target_jdk) <= 0;
  }
  static {
      setTargetJDK("1.5.0");
  }
  
  private boolean expressionLookahead() {
     Token tok = getToken(1);
     if (tok.image.equals(",")) {
        tok = getToken(2);
        if (!(tok.image.equals(")") || tok.image.equals("}"))) {
            return true;
        }
     }
     return false;
  }
  
  private boolean enumLookahead() {
    int x = 1;
    Token tok = null;
    while (true) {
      tok = getToken(x);
      if (tok.image.equals("static") || 
          tok.image.equals("final") || 
          tok.image.equals("public") || 
          tok.image.equals("protected") || 
          tok.image.equals("private") ) {
        x++;
      } else {
        break;
      }
    }
    return tok.image.equals("enum");
  }

//void ForLookahead() :
//{}
//{
//  [ "final" ]
//
//  ( "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | ( <IDENTIFIER> ( LOOKAHEAD(2) "." <IDENTIFIER> )* ) )
//  [ LOOKAHEAD(5)
//    ( "<" 
//      ( "<" | ">" | ">>" | ">>>" | "." | "," | "?" | "super" | "extends" | ( "[" "]" ) | <IDENTIFIER> )+
//    )
//    |
//    ( ( "[" "]" )* <IDENTIFIER> )
//  ]
//  ":"
//}
  private boolean forLookahead() {
    int x = 0;
    Token tok = getToken(++x);
    if (tok.image.equals("final")) {
       tok = getToken(++x);
    }
    if (    tok.image.equals("boolean") || tok.image.equals("char") || tok.image.equals("byte") || tok.image.equals("short")
         || tok.image.equals("int") || tok.image.equals("long") || tok.image.equals("float") || tok.image.equals("double")) {
       tok = getToken(++x);
    } else if (tok.kind==IDENTIFIER) {
       tok = getToken(++x);
       while (tok.kind==DOT) {
          tok = getToken(++x);
          if (tok.kind != IDENTIFIER) {
             return false;
          }
          tok = getToken(++x);
       }
    } else {
       return false;
    }
    if (tok.kind==LT) {
       while (true) {
          tok = getToken(++x);
          if (   tok.kind==LT || tok.kind==GT || tok.kind==RSIGNEDSHIFT || tok.kind==RUNSIGNEDSHIFT || tok.kind==DOT
              || tok.kind==COMMA || tok.kind==HOOK || tok.kind==SUPER || tok.kind==EXTENDS || tok.kind==IDENTIFIER) {
             // do nothing
          } else if (tok.kind==LBRACKET) {
             tok = getToken(++x);
             if (tok.kind!=RBRACKET) {
                return false;
             }
          } else {
             break;
          }
       }
       x--;
    } else if (tok.kind==LBRACKET) {
       while (tok.kind==LBRACKET) {
          tok = getToken(++x);
          if (tok.kind!=RBRACKET) {
             return false;
          }
          tok = getToken(++x);
       }
       if (tok.kind != IDENTIFIER) {
          return false;
       }
    }
    tok = getToken(++x);
    return (tok.kind==COLON);
  }



//void MethodDeclarationLookahead() :
//{}
//{
//  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp" )*
//  [ Attribute() ]
//  (
//    (
//      ( "void" | "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | ( <IDENTIFIER> ( LOOKAHEAD(2) "." <IDENTIFIER> )* ) )
//      [ LOOKAHEAD(5)
//        ( "<" 
//          ( "<" | ">" | ">>" | ">>>" | "." | "," | "?" | "super" | "extends" | ( "[" "]" ) | <IDENTIFIER> )+
//        )
//        |
//        ( ( "[" "]" )* <IDENTIFIER> )
//      ]
//      "("
//    )
//  |
//    ( 
//      "<"
//    )
//  )
//}
  private boolean methodDeclarationLookahead() {
    int x = 0;
    Token tok = getToken(++x);
    while (    "public".equals(tok.image) || "protected".equals(tok.image) || "private".equals(tok.image)
            || "static".equals(tok.image) || "abstract".equals(tok.image) || "final".equals(tok.image)
            || "native".equals(tok.image) || "synchronized".equals(tok.image) || "strictfp".equals(tok.image) ) {
       tok = getToken(++x);
    }
    // FIXME: add attribute here
    if (    tok.image.equals("boolean") || tok.image.equals("char") || tok.image.equals("byte") || tok.image.equals("short")
         || tok.image.equals("int") || tok.image.equals("long") || tok.image.equals("float") || tok.image.equals("double")
         || tok.image.equals("void") ) {
       tok = getToken(++x);
    } else if (tok.kind==IDENTIFIER) {
       tok = getToken(++x);
       while (tok.kind==DOT) {
          tok = getToken(++x);
          if (tok.kind != IDENTIFIER) {
             return false;
          }
          tok = getToken(++x);
       }
    } else if (tok.kind==LT) {
       return true;
    } else {
       return false;
    }
    if (tok.kind==LT) {
       while (true) {
          tok = getToken(++x);
          if (   tok.kind==LT || tok.kind==GT || tok.kind==RSIGNEDSHIFT || tok.kind==RUNSIGNEDSHIFT || tok.kind==DOT
              || tok.kind==COMMA || tok.kind==HOOK || tok.kind==SUPER || tok.kind==EXTENDS || tok.kind==IDENTIFIER) {
             // do nothing
          } else if (tok.kind==LBRACKET) {
             tok = getToken(++x);
             if (tok.kind!=RBRACKET) {
                return false;
             }
          } else {
             break;
          }
       }
       x--;
    } else if (tok.kind==LBRACKET) {
       while (tok.kind==LBRACKET) {
          tok = getToken(++x);
          if (tok.kind!=RBRACKET) {
             return false;
          }
          tok = getToken(++x);
       }
       if (tok.kind != IDENTIFIER) {
          return false;
       }
    }
    tok = getToken(++x);
    return (tok.kind==LPAREN);
  }


// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
//void CastLookahead() :
//{}
//{
//  "("
//  (
//    LOOKAHEAD( ( <IDENTIFIER> ("." <IDENTIFIER> )* ) ( "[" | "<" ) )
//    ( <IDENTIFIER> ( LOOKAHEAD(2) "." <IDENTIFIER> )* )
//    (
//      ( "[" "]" )+
//      |
//      ( 
//        "<"
//        ( ( "<" | "." | "," | "?" | "super" | "extends" | ( "[" "]" ) | <IDENTIFIER> )*
//          ( ">" | ">>" | ">>>" )
//        )+
//        ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
//      )
//    )
//  |
//    LOOKAHEAD( ("boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double") ")" )
//    ("boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double") ")" 
//  |
//    LOOKAHEAD( ReferenceType() ")" )
//    ReferenceType()
//    ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
//  |
//    <IDENTIFIER> ("." <IDENTIFIER> )* // Name()
//    ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
//  )
//}

   private boolean castLookahead() {
      int x = 0;
      Token tok = getToken(++x);
      if (tok.kind!=LPAREN) {
         return false;
      }
      tok = getToken(++x);
      if (    "boolean".equals(tok.image) || "char".equals(tok.image)  || "byte".equals(tok.image)
           || "short".equals(tok.image)   || "int".equals(tok.image)   || "long".equals(tok.image)
           || "float".equals(tok.image)   || "double".equals(tok.image) ) {
         tok = getToken(++x);
         return (tok.kind==RPAREN);
      } else if (tok.kind==IDENTIFIER) {
         tok = getToken(++x);
         if (tok.kind==LT) {
               // type arguments
         }
         while (tok.kind==DOT) {
            tok = getToken(++x);
            if (tok.kind != IDENTIFIER) {
               return false;
            }
            tok = getToken(++x);
            if (tok.kind==LT) {
               // type arguments
            }
         }
         if (tok.kind==LBRACKET) {
            while (tok.kind==LBRACKET) {
               tok = getToken(++x);
               if (tok.kind!=RBRACKET) {
                  return false;
               }
               tok = getToken(++x);
            }
            return castEnd(tok);
         } else if (tok.kind==LT) {
            while (true) {
               tok = getToken(++x);
               if (   tok.kind==LT || tok.kind==DOT || tok.kind==COMMA || tok.kind==HOOK
                   || tok.kind==SUPER || tok.kind==EXTENDS || tok.kind==IDENTIFIER) {
                  // do nothing
               } else if (tok.kind==LBRACKET) {
                  tok = getToken(++x);
                  if (tok.kind!=RBRACKET) {
                     return false;
                  }
               } else {
                  if (!(tok.kind==GT || tok.kind==RSIGNEDSHIFT || tok.kind==RUNSIGNEDSHIFT)) {
                     return false;
                  }
                  break;
               }
            }
            return castEnd(getToken(++x));
         } else if (tok.kind==RPAREN) {
            return castEnd(getToken(++x));
         }
         return false;
      }
      return false;
   }

   private boolean castEnd(Token tok) {
      return (   tok.kind==TILDE             || tok.kind==BANG            || tok.kind==LPAREN || tok.kind==IDENTIFIER
              || "this".equals(tok.image)    || "super".equals(tok.image) || "new".equals(tok.image)
              || tok.kind==INTEGER_LITERAL   || tok.kind==FLOATING_POINT_LITERAL
              || tok.kind==CHARACTER_LITERAL || tok.kind==STRING_LITERAL
              || "true".equals(tok.image)    || "false".equals(tok.image) || "null".equals(tok.image) );
   }


  private boolean assertLookahead() {
    return useAssert && "assert".equals(getToken(1).image);
  }
  
  public static void main(String args[]) {
  }

}

PARSER_END(JavaParser)


/* WHITE SPACE */

SKIP :
{
 " " | "\t" | "\f"
 | "\u001a" { System.out.println("Warning: cntl-z found at end of file"); }: IN_ONLY_EOF
}

<IN_ONLY_EOF>
MORE :
{
    < ~[]  > { System.out.println("Error: not characters should follow cntl-z at end of file"); }
}

SPECIAL_TOKEN :
{
  "\n"
| "\r"
| "\r\n"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
|
  "/*<" : IN_CATEGORY_COMMENT
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN : { <SINGLE_LINE_COMMENT:  (~["\r","\n","\u001a"])* ("\r"|"\n"|"\r\n")? > : DEFAULT }
//SPECIAL_TOKEN :
//{
//  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
//}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_CATEGORY_COMMENT>
SPECIAL_TOKEN :
{
  //<CATEGORY_COMMENT: ">*/" > : DEFAULT
  <CATEGORY_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT,IN_CATEGORY_COMMENT>
MORE :
{
  < ~[] >
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  < ABSTRACT: "abstract" >
//| < ASSERT: "assert" > if assert is a token then pre jdk1.4 java may not be parsed,
//                       so we get a Warning where "assert" is used as a token.
| < BOOLEAN: "boolean" >
| < BREAK: "break" >
| < BYTE: "byte" >
| < CASE: "case" >
| < CATCH: "catch" >
| < CHAR: "char" >
| < CLASS: "class" >
| < CONST: "const" >
| < CONTINUE: "continue" >
| < _DEFAULT: "default" >
| < DO: "do" >
| < DOUBLE: "double" >
| < ELSE: "else" >
// | < ENUM: "enum" > if enum is a token then pre jdk1.5 java may not be parsed,
//                    so we get a Warning where "enum" is used as a token.
| < EXTENDS: "extends" >
| < FALSE: "false" >
| < FINAL: "final" >
| < FINALLY: "finally" >
| < FLOAT: "float" >
| < FOR: "for" >
| < GOTO: "goto" >
| < IF: "if" >
| < IMPLEMENTS: "implements" >
| < IMPORT: "import" >
| < INSTANCEOF: "instanceof" >
| < INT: "int" >
| < INTERFACE: "interface" >
| < LONG: "long" >
| < NATIVE: "native" >
| < NEW: "new" >
| < NULL: "null" >
| < PACKAGE: "package">
| < PRIVATE: "private" >
| < PROTECTED: "protected" >
| < PUBLIC: "public" >
| < RETURN: "return" >
| < SHORT: "short" >
| < STATIC: "static" >
| < STRICTFP: "strictfp" >
| < SUPER: "super" >
| < SWITCH: "switch" >
| < SYNCHRONIZED: "synchronized" >
| < THIS: "this" >
| < THROW: "throw" >
| < THROWS: "throws" >
| < TRANSIENT: "transient" >
| < TRUE: "true" >
| < TRY: "try" >
| < VOID: "void" >
| < VOLATILE: "volatile" >
| < WHILE: "while" >
}

/* LITERALS */

TOKEN :
{
  < INTEGER_LITERAL:
        <DECIMAL_LITERAL> (["l","L"])?
      | <HEX_LITERAL> (["l","L"])?
      | <OCTAL_LITERAL> (["l","L"])?
  >
|
  < #DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
|
  < #HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
|
  < #OCTAL_LITERAL: "0" (["0"-"7"])* >
|
  < FLOATING_POINT_LITERAL:
        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)? (["f","F","d","D"])?
      | "." (["0"-"9"])+ (<EXPONENT>)? (["f","F","d","D"])?
      | (["0"-"9"])+ <EXPONENT> (["f","F","d","D"])?
      | (["0"-"9"])+ (<EXPONENT>)? ["f","F","d","D"]
  >
|
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
|
  < CHARACTER_LITERAL:
      "'"
      (   (~["'","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )
      "'"
  >
|
  < STRING_LITERAL:
      "\""
      (   (~["\"","\\","\n","\r"])
        | ("\\"
            ( ["n","t","b","r","f","\\","'","\""]
            | ["0"-"7"] ( ["0"-"7"] )?
            | ["0"-"3"] ["0"-"7"] ["0"-"7"]
            )
          )
        | ("\\u"
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
        	["0"-"9","A"-"F","a"-"f"]
          )
      )*
      "\""
  >
}

/* IDENTIFIERS */

TOKEN :
{
  < IDENTIFIER: <LETTER> (<LETTER>|<DIGIT>)* >
|
  < #LETTER:
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00c0"-"\u00d6",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff"
      ]
  >
|
  < #DIGIT:
      [
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049"
      ]
  >
}

/* SEPARATORS */

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < VARARG: "..." >
}

/* OPERATORS */

TOKEN :
{
  < ASSIGN: "=" >
| < GT: ">" >
| < LT: "<" >
| < BANG: "!" >
| < TILDE: "~" >
| < HOOK: "?" >
| < COLON: ":" >
| < EQ: "==" >
| < LE: "<=" >
| < GE: ">=" >
| < NE: "!=" >
| < SC_OR: "||" >
| < SC_AND: "&&" >
| < INCR: "++" >
| < DECR: "--" >
| < PLUS: "+" >
| < MINUS: "-" >
| < STAR: "*" >
| < SLASH: "/" >
| < BIT_AND: "&" >
| < BIT_OR: "|" >
| < XOR: "^" >
| < REM: "%" >
| < LSHIFT: "<<" >
| < RSIGNEDSHIFT: ">>" >
| < RUNSIGNEDSHIFT: ">>>" >
| < PLUSASSIGN: "+=" >
| < MINUSASSIGN: "-=" >
| < STARASSIGN: "*=" >
| < SLASHASSIGN: "/=" >
| < ANDASSIGN: "&=" >
| < ORASSIGN: "|=" >
| < XORASSIGN: "^=" >
| < REMASSIGN: "%=" >
| < LSHIFTASSIGN: "<<=" >
| < RSIGNEDSHIFTASSIGN: ">>=" >
| < RUNSIGNEDSHIFTASSIGN: ">>>=" >
| < ATTRIBUTE: "@" >
}


/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/

/*
 * Program structuring syntax follows.
 */

ASTCompilationUnit CompilationUnit() :
{
    Token tok;
}
{
  [ PackageDeclaration() ]
  ( ImportDeclaration() )*
  ( TypeDeclaration() )*
  tok=<EOF>
  {
    jjtn000.addSpecial("EOF", tok.specialToken);
    return jjtn000;
  }
}

void PackageDeclaration() :
{
    Token tok;
}
{
  tok="package" {jjtn000.addSpecial("package", tok.specialToken);}
  Name()
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void ImportDeclaration() :
{
    Token tok = null;
    Token specialPoint = null;
}
{
  specialPoint="import" {jjtn000.addSpecial("import", specialPoint.specialToken);}
  [ specialPoint="static"
    {
      jjtn000.addSpecial("static", specialPoint.specialToken);
      jjtn000.setStaticImport(true);
    }
  ]
  Name()
    [
      specialPoint="." {jjtn000.addSpecial("period", specialPoint.specialToken);}
      tok="*" {jjtn000.addSpecial("star", tok.specialToken);}
    ]
  specialPoint=";" {jjtn000.addSpecial("semicolon", specialPoint.specialToken);}
  {
    jjtn000.setImportPackage(tok != null);
  }
}

void TypeDeclaration() :
{
    Token specialPoint;
}
{
  LOOKAHEAD( ( "abstract" | "final" | "public" | "strictfp" )* [ Attribute() ] "class" )
  ClassDeclaration()
|
  LOOKAHEAD( { enumLookahead() } )
  EnumDeclaration()
|
  InterfaceDeclaration()
}


/*
 * Declaration syntax follows.
 */

void ClassDeclaration() :
{
  Token tok;
}
{
  (
    (tok="abstract" {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"    {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="strictfp" {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="public"   {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} )
  )*
  UnmodifiedClassDeclaration()
  [ ";" ]
}

void UnmodifiedClassDeclaration() :
{
    Token tok;
    Token specialToken;
}
{
  [
    LOOKAHEAD("@")
    Attribute()
  ]
  specialToken="class" {jjtn000.addSpecial("class", specialToken.specialToken);}
  (
    tok=<IDENTIFIER>
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  )
  [
    TypeParameters()
  ]
  [
    specialToken="extends"  {jjtn000.addSpecial("extends", specialToken.specialToken);}
    ClassOrInterfaceType()
  ]
  [
    specialToken="implements"  {jjtn000.addSpecial("implements", specialToken.specialToken);}
    GenericNameList()
  ]
  ClassBody()
}


void Attribute() :
{
  Token specialToken;
}
{
  specialToken="@" {jjtn000.addSpecial("@", specialToken.specialToken);}
  Identifier()
  [
    Arguments()
  ]
}


void TypeParameters() :
{
  Token specialToken;
}
{
  specialToken="<"  {
    if (!jdk1_5) {
      throw new ParseException("Type Parameters are only available in JDK 1.5 or later generics" );
    }
    jjtn000.addSpecial("<", specialToken.specialToken);
  }
  TypeParameterList() 
  specialToken=">"  {jjtn000.addSpecial(">", specialToken.specialToken);}
}

void TypeParameterList() :
{
    Token generic;
    Token tok;
    int commaCount = 0;
}
{
    (
      TypeParameter()
    )
    (
      tok="," {jjtn000.addSpecial("comma."+commaCount, tok.specialToken); commaCount++; }
      TypeParameter()
    )*
}

void TypeParameter() :
{
    Token tok;
}
{
    (
      Identifier()
      [
        tok="extends" {jjtn000.addSpecial("extends.", tok.specialToken);}
        [ ClassOrInterfaceType() ]
        (
          tok="&" {jjtn000.addSpecial("and.", tok.specialToken);}
          [ ClassOrInterfaceType() ]
        )*
      ]
    )
}

void ReferenceTypeList() :
{
    Token tok;
    Token tok1;
    Token tok2;
    Token tok3;
    int commaCount = 0;
}
{
  tok="<" {
    if (!jdk1_5) {
      throw new ParseException("Generic reference types are only available in JDK 1.5 or later generics" );
    }
    jjtn000.addSpecial("<.", tok.specialToken);
  }
  ActualTypeArgument()
  (
    tok="," {jjtn000.addSpecial("comma."+commaCount, tok.specialToken); commaCount++; }
    ActualTypeArgument()
  )*
  (
    ( tok=">" {
      jjtn000.addSpecial(">.", tok.specialToken);} ) |
       /* This is an horendous hack caused by ">", ">>" and ">>>" all being tokens,
        * but in this case also being used as one, two or three individual tokens
        * ">", ">" ">" and ">" ">" ">".
        */
    ( tok=">>" { 
      jjtn000.addSpecial(">.", tok.specialToken);
      tok2=tok.next;
      tok1=Token.newToken(GT);
      tok.image=">";  tok.kind=GT;  tok.next=tok1;
      tok1.image=">"; tok1.kind=GT; tok1.next=tok2; } ) |
    ( tok=">>>" {
      jjtn000.addSpecial(">.", tok.specialToken);
      tok3=tok.next;
      tok1=Token.newToken(GT); tok2=Token.newToken(GT);
      tok.image=">";  tok.kind=GT;  tok.next=tok1;
      tok1.image=">"; tok1.kind=GT; tok1.next=tok2;
      tok2.image=">"; tok2.kind=GT; tok2.next=tok3; } )
   )
}

void ActualTypeArgument() :
{
    Token tok;
}
{
  // Wildcard
  LOOKAHEAD("?")  // FIXME? is this required??
  [ tok="?" {
      jjtn000.addSpecial("?", tok.specialToken);
      jjtn000.setWildcard();
    }
    [
      // WildCardBounds
      (
        tok="extends" { jjtn000.setExtends(); jjtn000.addSpecial("entends", tok.specialToken); }
        |
        tok="super" { jjtn000.setSuper(); jjtn000.addSpecial("super", tok.specialToken); }
      )
      ReferenceType()
    ]  
  ]
|
  ReferenceType()
}


void ClassBody() :
{
    Token tok;
}
{
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( ClassBodyDeclaration() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
}

void NestedClassDeclaration() :
{
    Token tok;
}
{
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="abstract"  {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} )
  )*
  UnmodifiedClassDeclaration()
  [ ";" ]
}

void ClassBodyDeclaration() :
{}
{
  LOOKAHEAD(5) // FIXME? is this required?? why 5??
  Initializer()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* [ Attribute() ] "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )* [ Attribute() ] "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( [ "public" | "protected" | "private" ] [ Attribute() ] [ TypeParameters() ] Name() [ TypeArguments() ] "(" )
  ConstructorDeclaration()
|
  //LOOKAHEAD( MethodDeclarationLookahead() )
  LOOKAHEAD( {methodDeclarationLookahead()} )
  MethodDeclaration()
|
  LOOKAHEAD( { enumLookahead() } )
  EnumDeclaration()
|
  FieldDeclaration()
}

// enumeration from jdk1.5
void EnumDeclaration() :
{
    Token tok;
    Token specialToken;
    int elementCount = 0;
}
{
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} )
  )*
  specialToken = <IDENTIFIER> {
    if (!specialToken.image.equals("enum")) {
      throw new ParseException("ERROR: expecting enum");
    }
    if (!jdk1_5) {
      System.err.println("WARNING: enum declared in pre-jdk 1.5 target");
    }
    jjtn000.addSpecial("enum", specialToken.specialToken);
  }
  Identifier()
  [
    specialToken="implements"  {jjtn000.addSpecial("implements", specialToken.specialToken);}
    GenericNameList()
  ]
  tok = "{"  {jjtn000.addSpecial("begin", tok.specialToken);}
  EnumElement()
  (
    tok = ","
    EnumElement()
    {
      jjtn000.addSpecial("comma." + elementCount, tok.specialToken);
      elementCount++;
    }
  )*
  [ ";" ( ClassBodyDeclaration() )* ]
  tok = "}" {jjtn000.addSpecial("end", tok.specialToken);}
  ( ";" )*
}

void Identifier() :
{
    Token tok;
}
{
    tok = <IDENTIFIER>
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
}

void EnumElement() :
{
    Token tok;
}
{
    tok = <IDENTIFIER>
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
    [ Arguments() ]
    [ ClassBody() ]
}


// This production is to determine lookahead only.
//void MethodDeclarationLookahead() :
//{}
//{
//  ( "public" | "protected" | "private" | "static" | "abstract" | "final" | "native" | "synchronized" | "strictfp" )*
//  [ Attribute() ]
//  (
//    (
//      ( "void" | "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | ( <IDENTIFIER> ( LOOKAHEAD(2) "." <IDENTIFIER> )* ) )
//      [ LOOKAHEAD(5)
//        ( "<" 
//          ( "<" | ">" | ">>" | ">>>" | "." | "," | "?" | "super" | "extends" | ( "[" "]" ) | <IDENTIFIER> )+
//        )
//        |
//        ( ( "[" "]" )* <IDENTIFIER> )
//      ]
//      "("
//    )
//  |
//    ( 
//      "<"
//    )
//  )
//}


//void ForLookahead() :
//{}
//{
//  [ "final" ]
//
//  ( "boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double" | ( <IDENTIFIER> ( LOOKAHEAD(2) "." <IDENTIFIER> )* ) )
//  [ LOOKAHEAD(5)
//    ( "<" 
//      ( "<" | ">" | ">>" | ">>>" | "." | "," | "?" | "super" | "extends" | ( "[" "]" ) | <IDENTIFIER> )+
//    )
//    |
//    ( ( "[" "]" )* <IDENTIFIER> )
//  ]
//  ":"
//}

void InterfaceDeclaration() :
{
    Token tok;
}
{
  (
    (tok="abstract"  {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} )
  )*
  UnmodifiedInterfaceDeclaration()
  [ ";" ]
}

void NestedInterfaceDeclaration() :
{
    Token tok;
}
{
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="abstract"  {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} )
  )*
  UnmodifiedInterfaceDeclaration()
  [ ";" ]
}

void UnmodifiedInterfaceDeclaration() :
{
    Token specialToken;
    Token tok;
}
{
  [
    LOOKAHEAD("@")
    Attribute()
  ]
  specialToken="interface" {jjtn000.addSpecial("interface", specialToken.specialToken);}
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    {jjtn000.addSpecial("id", tok.specialToken);}
  }
  [ TypeParameters() ]
  [
    specialToken="extends" {jjtn000.addSpecial("extends", specialToken.specialToken);}
    GenericNameList()
  ]
  InterfaceBody()
}

void InterfaceBody() :
{
	Token tok;
}
{
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( InterfaceMemberDeclaration() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
}

void InterfaceMemberDeclaration() :
{}
{
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )*  [ Attribute() ] "class" )
  NestedClassDeclaration()
|
  LOOKAHEAD( ( "static" | "abstract" | "final" | "public" | "protected" | "private" | "strictfp" )*  [ Attribute() ] "interface" )
  NestedInterfaceDeclaration()
|
  LOOKAHEAD( {methodDeclarationLookahead()} )
  MethodDeclaration()
|
  FieldDeclaration()
}

void FieldDeclaration() :
{
    Token tok;
    int commaCount = 0;
}
{
  (
    (tok="static"    {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="transient" {jjtn000.addModifier(tok.image); jjtn000.addSpecial("transient", tok.specialToken);} ) |
    (tok="volatile"  {jjtn000.addModifier(tok.image); jjtn000.addSpecial("volatile", tok.specialToken);} ) |
    (tok="strictfp"  {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="final"     {jjtn000.setFinal();  jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="public"    {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected" {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"   {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} )
  )*
  [
    LOOKAHEAD("@") // FIXME? is this required??
    Attribute()
  ]
  Type() VariableDeclarator()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++; }
    VariableDeclarator()
  )*
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
  (";")*
}

void VariableDeclarator() :
{
    Token tok;
}
{
  VariableDeclaratorId()
  [
    tok="=" {jjtn000.addSpecial("equals", tok.specialToken);}
    VariableInitializer()
  ]
}

void VariableDeclaratorId() :
{
    Token tok;
    int arrayCount = 0;
}
{
  tok=<IDENTIFIER>
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.setName(tok.image);
  }
  (
    "[" "]"
    {arrayCount++;}
  )*
  {
    jjtn000.setArrayCount(arrayCount);
  }
}

void VariableInitializer() :
{}
{
  ArrayInitializer()
|
  Expression()
}

void ArrayInitializer() :
{
    Token tok;
    int commaCount = 0;
}
{
  tok="{" { jjtn000.addSpecial("begin", tok.specialToken); }
  [
    VariableInitializer()
    (
      LOOKAHEAD(2)
      tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++;}
      VariableInitializer()
    )*
  ]
  [
    tok=","
    {
      jjtn000.addSpecial("comma." + commaCount, tok.specialToken);
      commaCount++;
      jjtn000.setFinalComma(true);
    }
  ]
  tok="}" { jjtn000.addSpecial("end", tok.specialToken); }
}

void MethodDeclaration() :
{
    Token tok;
}
{
  (
    (tok="public"       {jjtn000.setPublic(); jjtn000.addSpecial("public", tok.specialToken);} ) |
    (tok="protected"    {jjtn000.setProtected(); jjtn000.addSpecial("protected", tok.specialToken);} ) |
    (tok="private"      {jjtn000.setPrivate(); jjtn000.addSpecial("private", tok.specialToken);} ) |
    (tok="static"       {jjtn000.setStatic(); jjtn000.addSpecial("static", tok.specialToken);} ) |
    (tok="abstract"     {jjtn000.setAbstract(); jjtn000.addSpecial("abstract", tok.specialToken);} ) |
    (tok="final"        {jjtn000.setFinal(); jjtn000.addSpecial("final", tok.specialToken);} ) |
    (tok="native"       {jjtn000.addModifier(tok.image); jjtn000.addSpecial("native", tok.specialToken);} ) |
    (tok="strictfp"     {jjtn000.setStrict(); jjtn000.addSpecial("strictfp", tok.specialToken);} ) |
    (tok="synchronized" {jjtn000.setSynchronized(); jjtn000.addSpecial("synchronized", tok.specialToken);} )
  )*
  [
    LOOKAHEAD("@") // FIXME? is this required??
    Attribute()
  ]
  [ TypeParameters() ] ResultType() MethodDeclarator()
  [
    tok="throws" {jjtn000.addSpecial("throws", tok.specialToken);}
    NameList()
  ]
  (
    Block() |
    (tok=";"  {jjtn000.addSpecial("semicolon", tok.specialToken);})
  )
  //  Ignore the extra semicolons
  ( ";" )*
}

void MethodDeclarator() :
{
    Token tok;
    int arrayCount = 0;
}
{
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }
  FormalParameters()
  (
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
  )*
  {
    jjtn000.setArrayCount(arrayCount);
  }
}

void FormalParameters() :
{
    Token tok;
    int commaCount = 0;
}
{
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  [
    FormalParameter()
    (
      tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
      FormalParameter()
      {commaCount++;}
    )*
  ]
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
}

void FormalParameter() :
{
    Token tok = null;
}
{
  [ tok="final" {jjtn000.setUsingFinal(true); jjtn000.addSpecial("final", tok.specialToken); } ]
  Type() 
  [ tok="..." {jjtn000.setVarArg(true); jjtn000.addSpecial("vararg", tok.specialToken);} ]
  VariableDeclaratorId()
}

void ConstructorDeclaration() :
{
    Token tok;
    Token mod;
}
{
  [
    (mod="public"       {jjtn000.setPublic(); jjtn000.addSpecial("public", mod.specialToken);} ) |
    (mod="protected"    {jjtn000.setProtected(); jjtn000.addSpecial("protected", mod.specialToken);} ) |
    (mod="private"      {jjtn000.setPrivate(); jjtn000.addSpecial("private", mod.specialToken);} )
  ]
  [
     LOOKAHEAD("@") // FIXME? is this required??
     Attribute()
  ]
  [ TypeParameters() ]
  tok=<IDENTIFIER>
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.setName(tok.image);
  }
  [ TypeArguments() ]
  FormalParameters()
  [
    tok="throws" {jjtn000.addSpecial("throws", tok.specialToken);}
    NameList()
  ]
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
    [
      LOOKAHEAD(  ([TypeArguments()] "this" "(" )
                | ([<IDENTIFIER> "."] [ TypeArguments() ] tok="super" "(" ))
      ExplicitConstructorInvocation()
    ]
    ( BlockStatement() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
  [
    ";"
  ]
}

void ExplicitConstructorInvocation() :
{
    Token tok;
    Token semicolon;
    Token dot = null;
}
{
(
  LOOKAHEAD([TypeArguments()] "this" "(" )
  [ TypeArguments() ]   // new
  tok="this" Arguments() semicolon=";" {((ASTExplicitConstructorInvocation)jjtn000).setIsThis();}
|
  [ LOOKAHEAD(PrimaryExpression() "." ) PrimaryExpression() dot="." { jjtn000.addSpecial(".", dot.specialToken); } ]
  [ Identifier() dot="." { jjtn000.addSpecial(".2", dot.specialToken); } ]
  [ TypeArguments() ]
  tok="super" Arguments() semicolon=";"
  {
    ((ASTExplicitConstructorInvocation)jjtn000).setIsSuper();
  }
)
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("explicit", tok.specialToken);
    jjtn000.addSpecial("semicolon", semicolon.specialToken);
    //if (dot != null) {
    //    jjtn000.addSpecial(".2", dot.specialToken);
    //}
  }
}

void Initializer() :
{
    Token tok = null;
}
{
  [ tok = "static" ] Block()
  {
    jjtn000.setUsingStatic(tok != null);
    if (tok != null) {
      jjtn000.addSpecial("static", tok.specialToken);
    }
  }
  ( ";" )*
}


/*
 * Type, name and expression syntax follows.
 */


void Type():
{
}
{
  (
    LOOKAHEAD(2)
    ReferenceType()
  |
    PrimitiveType()
  )
}

void ReferenceType() :
{
    int arrayCount = 0;
    Token tok;
}
{
  (
    (
      ClassOrInterfaceType()
      (
        tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
        tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
        {arrayCount++;}
      )*
    )
    |
    (
      PrimitiveType()
      (
        tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
        tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
        {arrayCount++;}
      )+
    )
  )
  {
    jjtn000.setArrayCount(arrayCount);
  }
}

void TypeArguments() :
{
    Token tok;
    Token tok1;
    Token tok2;
    Token tok3;
    int commaCount = 0;
}
{
  tok="<" {
    if (!jdk1_5) {
      throw new ParseException("Generic type arguments are only available in JDK 1.5 or later generics" );
    }
    jjtn000.addSpecial("<.", tok.specialToken);
  }
  ActualTypeArgument()
  (
    LOOKAHEAD(2)
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++; }
    ActualTypeArgument()
  )*
  (
    (tok=">" {jjtn000.addSpecial(">.", tok.specialToken);} ) |
     
    /* This is an horendous hack caused by ">", ">>" and ">>>" all being tokens,
     * but in this case also being used as one, two or three individual tokens
     * ">", ">" ">" and ">" ">" ">".
     */
    ( tok=">>" { 
        jjtn000.addSpecial(">.", tok.specialToken);
        tok2=tok.next;
        tok1=Token.newToken(GT);
        tok.image=">";  tok.kind=GT;  tok.next=tok1;
        tok1.image=">"; tok1.kind=GT; tok1.next=tok2; } ) |
    ( tok=">>>" {
        jjtn000.addSpecial(">.", tok.specialToken);
        tok3=tok.next;
        tok1=Token.newToken(GT); tok2=Token.newToken(GT);
        tok.image=">";  tok.kind=GT;  tok.next=tok1;
        tok1.image=">"; tok1.kind=GT; tok1.next=tok2;
        tok2.image=">"; tok2.kind=GT; tok2.next=tok3; } )
  )
}

void PrimitiveType() :
{
    Token tok;
}
{
(
    tok="boolean"
  |
    tok="char"
  |
    tok="byte"
  |
    tok="short"
  |
    tok="int"
  |
    tok="long"
  |
    tok="float"
  |
    tok="double"
)
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("primitive", tok.specialToken);
  }
}

void ResultType() :
{
    Token tok;
}
{
  (tok="void" {jjtn000.addSpecial("primitive", tok.specialToken);})
|
  Type()
}

void Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{
    Token tok;
    Token period;
    int count = 0;
}
{
  tok=<IDENTIFIER> {jjtn000.addSpecial("id" + count, tok.specialToken);}
  {
    if (TESTING) {
        jjtn000.testingOnly__setBeginLine( tok.beginLine);
        jjtn000.testingOnly__setBeginColumn( tok.beginColumn);
    }
    jjtn000.addNamePart(tok.image);
    count++;
  }
  (
    LOOKAHEAD(2)
    period="."
    tok=<IDENTIFIER>
    {
      jjtn000.addNamePart(tok.image);
      jjtn000.addSpecial("period" + count, period.specialToken);
      jjtn000.addSpecial("id" + count, tok.specialToken);
      count++;
    }
  )*
}

//FIXME? would this work??
//void ClassOrInterfaceType() :
//{
//    Token period;
//    int count = 0;
//}
//{
//  Identifier()
//  (
//    [ TypeArguments() ]
//    [ period="."
//      Identifier()
//      {
//        jjtn000.addSpecial("period." + count, period.specialToken);
//        count++;
//      }
//      ]
//  )*
//}

void ClassOrInterfaceType() :
{
    Token period;
    int count = 0;
}
{
  Identifier()
  [ TypeArguments() ]
  (
    LOOKAHEAD( "." <IDENTIFIER> ["<"] )
    period="."
    Identifier()
    [ TypeArguments() ]
    {
      jjtn000.addSpecial("period." + count, period.specialToken);
      count++;
    }
  )*
}


void NameList() :
{
    Token tok;
    int commaCount = 0;
}
{
  Name()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
    Name()
    {commaCount++;}
  )*
}


void GenericNameList() :
{
    Token tok;
    int commaCount = 0;
}
{
  ClassOrInterfaceType()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);}
    ClassOrInterfaceType()
    {commaCount++;}
  )*
}


/*
 * Expression syntax follows.
 */

void Expression() :
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    AssignmentOperator() Expression()
  ]
}

void AssignmentOperator() :
{
    Token tok;
}
{
  (
    tok="="    |
    tok="*="   |
    tok="/="   |
    tok="%="   |
    tok="+="   |
    tok="-="   |
    tok="<<="  |
    tok=">>="  |
    tok=">>>=" |
    tok="&="   |
    tok="^="   |
    tok="|="
  )
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("operator", tok.specialToken);
  }
}

void ConditionalExpression() :
{
    Token tok;
}
{
  ConditionalOrExpression()
  [
    tok="?" {jjtn000.addSpecial("?", tok.specialToken);}
    Expression()
    tok=":" {jjtn000.addSpecial(":", tok.specialToken);}
    ConditionalExpression()
  ]
}

void ConditionalOrExpression() :
{
    Token tok;
    int count = 0;
}
{
  ConditionalAndExpression()
  (
    tok="||" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    ConditionalAndExpression()
  )*
}

void ConditionalAndExpression() :
{
    Token tok;
    int count = 0;
}
{
  InclusiveOrExpression()
  (
    tok="&&" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    InclusiveOrExpression()
  )*
}

void InclusiveOrExpression() :
{
    Token tok;
    int count = 0;
}
{
  ExclusiveOrExpression()
  (
    tok="|" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    ExclusiveOrExpression()
  )*
}

void ExclusiveOrExpression() :
{
    Token tok;
    int count = 0;
}
{
  AndExpression()
  (
    tok="^" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    AndExpression()
  )*
}

void AndExpression() :
{
    Token tok;
    int count = 0;
}
{
  EqualityExpression()
  (
    tok="&" {jjtn000.addSpecial("operator." + count, tok.specialToken); count++;}
    EqualityExpression()
  )*
}

void EqualityExpression() :
{
    Token tok;
    int count = 0;
}
{
  InstanceOfExpression()
  (
    ( tok="==" | tok="!=" )
    InstanceOfExpression()
    {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
    }
  )*
}

void InstanceOfExpression() :
{
    Token tok;
}
{
  RelationalExpression()
  [
    tok="instanceof"
    ReferenceType()
    {jjtn000.addSpecial("operator.0", tok.specialToken);}
  ]
}

void RelationalExpression() :
{
    Token tok;
    int count = 0;
}
{
  ShiftExpression()
  (
    (
      tok="<"  |
      tok=">"  |
      tok="<=" |
      tok=">="
    )
    {
      jjtn000.addName(tok.image);
      jjtn000.addSpecial("operator." + count, tok.specialToken);
      count++;
    }
    ShiftExpression()
  )*
}

void ShiftExpression() :
{
    Token tok;
    int count = 0;
}
{
  AdditiveExpression()
    (
      (
        tok="<<" |
        tok=">>" |
        tok=">>>"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      AdditiveExpression()
    )*
}

void AdditiveExpression() :
{
    Token tok;
    int count = 0;
}
{
  MultiplicativeExpression()
    (
      (
        tok="+" |
        tok="-"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      MultiplicativeExpression()
    )*
}

void MultiplicativeExpression() :
{
    Token tok;
    int count = 0;
}
{
  UnaryExpression()
    (
      (
        tok="*" |
        tok="/" |
        tok="%"
      )
      {
        jjtn000.addName(tok.image);
        jjtn000.addSpecial("operator." + count, tok.specialToken);
        count++;
      }
      UnaryExpression()
    )*
}

void UnaryExpression() :
{
    Token tok;
}
{
  (
    (
      tok="+" |
      tok="-"
    )
    UnaryExpression()
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  )
|
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  UnaryExpressionNotPlusMinus()
}

void PreIncrementExpression() :
{
    Token tok;
}
{
  tok="++" PrimaryExpression() {jjtn000.addSpecial("operator", tok.specialToken);}
}

void PreDecrementExpression() :
{
    Token tok;
}
{
  tok="--" PrimaryExpression() {jjtn000.addSpecial("operator", tok.specialToken);}
}

void UnaryExpressionNotPlusMinus() :
{
    Token tok;
}
{
  LOOKAHEAD( {castLookahead()} )
  CastExpression()
|
  (
    (
      tok="~" |
      tok="!"
    )
    UnaryExpression()
    {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  )
|
  PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead() :
{}
{
  "("
  (
    LOOKAHEAD( ( <IDENTIFIER> ("." <IDENTIFIER> )* ) ( "[" | "<" ) )
    ( <IDENTIFIER> ( LOOKAHEAD(2) "." <IDENTIFIER> )* )
    (
      ( "[" "]" )+
      |
      ( 
        "<"
        ( ( "<" | "." | "," | "?" | "super" | "extends" | ( "[" "]" ) | <IDENTIFIER> )*
          ( ">" | ">>" | ">>>" )
        )+
        ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
      )
    )
  |
    LOOKAHEAD( ("boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double") ")" )
    ("boolean" | "char" | "byte" | "short" | "int" | "long" | "float" | "double") ")" 
  |
    LOOKAHEAD( ReferenceType() ")" )
    ReferenceType()
    ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
  |
    <IDENTIFIER> ("." <IDENTIFIER> )* // Name()
    ")" ( "~" | "!" | "(" | <IDENTIFIER> | "this" | "super" | "new" | Literal() )
  )
}

void PostfixExpression() :
{
    Token tok = null;
}
{
  PrimaryExpression() [ tok="++" | tok="--" ]
  {
    if (tok != null) {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("operator", tok.specialToken);
    }
  }
}

void CastExpression() :
{
    Token tok;
}
{
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  Type()
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
  
  UnaryExpression()  // fix bug 758816 UnaryExpressionNotPlusMinus()
}

void PrimaryExpression() :
{}
{
  PrimaryPrefix()
  ( LOOKAHEAD( ("." "this") | ("." "super") | ("." "new") | "(" | "[" | ( "." "<") | ("." [ ReferenceTypeList() ] <IDENTIFIER>) | ReferenceTypeList() )
    PrimarySuffix()
  )*
}

void PrimaryPrefix() :
{
  Token tok;
  Token superTok;
  String name = "";
  int count = 0;
}
{
  Literal()
|
  tok="this"
  {
    jjtn000.setUsesThisModifier();
    jjtn000.setName("this");
    jjtn000.addSpecial("this", tok.specialToken);
  }
|
  LOOKAHEAD( (<IDENTIFIER> ".")* "super" "." )
  (
     tok=<IDENTIFIER> "."
     {
     	name = name + tok.image + ".";
	    jjtn000.addSpecial("this." + count, tok.specialToken);
	    count++;
     }
  )*
  superTok="super" "." tok=<IDENTIFIER>
  {
    jjtn000.setUsesSuperModifier();
    jjtn000.setCount(count);
    name = name + "super." + tok.image;
    jjtn000.setName(name);
    jjtn000.addSpecial("this", superTok.specialToken);
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
|
  LOOKAHEAD("new")  // FIXME? is this required??
  AllocationExpression()
|
  LOOKAHEAD( ResultType() "." "class" )
  ResultType() "." "class"
|
  Name() //? ClassOrInterfaceType()
}

void PrimarySuffix() :
{
    Token tok;
    Token tok1;
    Token tok2;
    Token tok3;
    Token generic;
}
{
  LOOKAHEAD(2)
  tok="." {jjtn000.addSpecial("dot", tok.specialToken);}
  tok="this"
  {
    jjtn000.setName("this");
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  LOOKAHEAD(2)
  tok="." {jjtn000.addSpecial("dot", tok.specialToken);}
  tok="super"
  {
    jjtn000.setName("super");
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  LOOKAHEAD("." "new")   // FIXME? factor out common "." ??
  tok="."  {jjtn000.addSpecial("dot", tok.specialToken);}
  AllocationExpression()
|
  tok="[" {jjtn000.addSpecial("[", tok.specialToken);}
  Expression()
  tok="]" {jjtn000.addSpecial("]", tok.specialToken);}
|
  LOOKAHEAD("(")  // FIXME? is this required??
  Arguments() {((ASTPrimarySuffix)jjtn000).setIsArguments();}
|
  LOOKAHEAD( "." ( "<" | <IDENTIFIER> ) )   // FIXME? factor out common "." ??
  tok="." {jjtn000.addSpecial("dot", tok.specialToken);}
  [ 
    LOOKAHEAD( "<" )   // FIXME? is this required??
    ReferenceTypeList()
  ]
  tok=<IDENTIFIER>
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }
|
  ReferenceTypeList()
}

void Literal() :
{
    Token tok = null;
}
{
  (
    tok=<INTEGER_LITERAL> |
    tok=<FLOATING_POINT_LITERAL> |
    tok=<CHARACTER_LITERAL> |
    tok=<STRING_LITERAL> |
    BooleanLiteral() |
    NullLiteral()
  )
  {
    if (tok != null) {
      jjtn000.setName(tok.image);
      jjtn000.addSpecial("id", tok.specialToken);
    }
  }
}

void BooleanLiteral() :
{
    Token tok;
}
{
  (
    tok="true" |
    tok="false"
  )
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
  }
}

void NullLiteral() :
{
    Token tok;
}
{
  tok="null"
  {
    jjtn000.addSpecial("id", tok.specialToken);
  }
}

void Arguments() :
{
    Token tok;
}
{
  tok="(" {jjtn000.addSpecial("begin", tok.specialToken);}
  [ ArgumentList() ] [ tok=","  {jjtn000.addSpecial("comma", tok.specialToken);} ]
  tok=")" {jjtn000.addSpecial("end", tok.specialToken);}
}

void ArgumentList() :
{
    Token tok;
    int commaCount = 0;
}
{
  Expression()
  (
    LOOKAHEAD({expressionLookahead()})
    tok=","  {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++;}
    Expression()
  )*
}

void AllocationExpression() :
{
    Token tok;
}
{

  tok="new" {jjtn000.addSpecial("id", tok.specialToken);}
  (
    LOOKAHEAD(ClassOrInterfaceType())
    ClassOrInterfaceType()
    (
      ArrayDimsAndInits()
    |
      Arguments() [ ClassBody() ]
    )
  |
    PrimitiveType()
    ArrayDimsAndInits()
  )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() :
{
    Token tok;
    int arrayCount = 0;
}
{
  (
    // FIXME? LOOKAHEAD looks wrong??
    LOOKAHEAD(2)
    (
      LOOKAHEAD(2)
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      Expression()
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )+
    (
      LOOKAHEAD(4)
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )*
   |
    (
      tok="[" {jjtn000.addSpecial("[." + arrayCount, tok.specialToken);}
      tok="]" {jjtn000.addSpecial("]." + arrayCount, tok.specialToken);}
      {arrayCount++;}
    )+
    ArrayInitializer()
  )
  {
    jjtn000.setArrayCount(arrayCount);
  }
}


/*
 * Statement syntax follows.
 */

void Statement() :
{
    Token tok;
}
{
  LOOKAHEAD( { assertLookahead() } )
  AssertionStatement()
|
  LOOKAHEAD(2)
  LabeledStatement()
|
  Block()
|
  EmptyStatement()
|
  StatementExpression() tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  SwitchStatement()
|
  IfStatement()
|
  WhileStatement()
|
  DoStatement()
|
  ForStatement()
|
  BreakStatement()
|
  ContinueStatement()
|
  ReturnStatement()
|
  ThrowStatement()
|
  SynchronizedStatement()
|
  TryStatement()
}

void LabeledStatement() :
{
    Token tok;
    Token colon;
}
{
  tok=<IDENTIFIER> colon=":" Statement()
  {
    jjtn000.setName(tok.image);
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.addSpecial("colon", colon.specialToken);
  }
}

void Block() :
{
    Token tok;
}
{
  tok="{" {jjtn000.addSpecial("begin", tok.specialToken);}
  ( BlockStatement() )*
  tok="}" {jjtn000.addSpecial("end", tok.specialToken);}
}

void BlockStatement() :
{
    Token tok;
}
{
  LOOKAHEAD( { assertLookahead() } )
  Statement()
|
  LOOKAHEAD([ "final" ] Type() <IDENTIFIER>)
  LocalVariableDeclaration()
  tok=";"
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  LOOKAHEAD([ "final" ] Name() "<" )
  LocalVariableDeclaration()
  tok=";"
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
|
  Statement()
|
  LOOKAHEAD([ "final" ] "class")
  [
    tok="final"
    {
      jjtn000.addSpecial("final", tok.specialToken);
      jjtn000.setFinal(true);
     }
  ]
  UnmodifiedClassDeclaration()
|
  LOOKAHEAD([ "final" ] "interface")
  [
    tok="final"
    {
      jjtn000.addSpecial("final", tok.specialToken);
      jjtn000.setFinal(true);
     }
  ]
  UnmodifiedInterfaceDeclaration()
}

void LocalVariableDeclaration() :
{
    Token tok = null;
    int commaCount = 0;
}
{
  [ tok="final" {
        jjtn000.setUsingFinal(true);
        jjtn000.addSpecial("final", tok.specialToken);
      }
  ]
  Type()
  VariableDeclarator()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken); commaCount++;}
    VariableDeclarator()
  )*
}

void EmptyStatement() :
{
    Token tok;
}
{
  tok=";"
  {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void StatementExpression() :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{
    Token tok;
}
{
  PreIncrementExpression()
|
  PreDecrementExpression()
|
  PrimaryExpression()
  [
    tok="++" {jjtn000.setName("++"); jjtn000.addSpecial("id", tok.specialToken);}
  |
    tok="--" {jjtn000.setName("--"); jjtn000.addSpecial("id", tok.specialToken);}
  |
    AssignmentOperator() Expression()
  ]
}

void SwitchStatement() :
{
    Token tok;
}
{
  tok="switch" {jjtn000.addSpecial("switch", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  tok="{" {jjtn000.addSpecial("beginBlock", tok.specialToken);}
    ( SwitchLabel() ( BlockStatement() )* )*
  tok="}" {jjtn000.addSpecial("endBlock", tok.specialToken);}
}

void SwitchLabel() :
{
    Token tok;
    Token colon;
}
{
(
  tok="case" Expression() colon=":"
|
  tok="default" colon=":"
)
  {
    jjtn000.addSpecial("id", tok.specialToken);
    jjtn000.addSpecial("colon", colon.specialToken);
  }
}

void IfStatement() :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{
    Token tok;
}
{
  tok="if" {jjtn000.addSpecial("if", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()
  [
    LOOKAHEAD(1)
    tok="else" {jjtn000.setHasElse(); jjtn000.addSpecial("else", tok.specialToken);}
    Statement()
  ]
}

void WhileStatement() :
{
    Token tok;
}
{
  tok="while" {jjtn000.addSpecial("while", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()
}


void ForStatement() :
{
    Token tok;
}
{
  tok="for" {jjtn000.addSpecial("for", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  (
      
    LOOKAHEAD( {forLookahead()} )
    ( 
      LocalVariableDeclaration()
      //FormalParameter()
      tok=":" {jjtn000.addSpecial("loopover", tok.specialToken);}
      Expression()
    )
    |
    (
      [ ForInit() ]
      tok=";" {jjtn000.addSpecial("init", tok.specialToken);}
      [ Expression() ]
      tok=";" {jjtn000.addSpecial("test", tok.specialToken);}
      [ ForUpdate() ]
    )
  )

  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Statement()
}

void ForInit() :
{}
{
  LOOKAHEAD( [ "final" ] ( Type() <IDENTIFIER> | Name() "<" ) )
  (
    LocalVariableDeclaration()
  )
|
  (
    StatementExpressionList()
  )
}



void DoStatement() :
{
    Token tok;
}
{
  tok="do" {jjtn000.addSpecial("do", tok.specialToken);}
  Statement()
  tok="while" {jjtn000.addSpecial("while", tok.specialToken);}
  tok="(" {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")" {jjtn000.addSpecial("endExpr", tok.specialToken);}
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}



void StatementExpressionList() :
{
    Token tok;
    int commaCount = 0;
}
{
  StatementExpression()
  (
    tok="," {jjtn000.addSpecial("comma." + commaCount, tok.specialToken);  commaCount++;}
    StatementExpression()
  )*
}

void ForUpdate() :
{}
{
  StatementExpressionList()
}

void BreakStatement() :
{
    Token tok;
}
{
  tok="break" {jjtn000.addSpecial("break", tok.specialToken);}
  [ tok=<IDENTIFIER> {jjtn000.setName(tok.image); jjtn000.addSpecial("id", tok.specialToken);}]
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}

}

void ContinueStatement() :
{
    Token tok;
}
{
  tok="continue" {jjtn000.addSpecial("continue", tok.specialToken);}
  [ tok=<IDENTIFIER> {jjtn000.setName(tok.image); jjtn000.addSpecial("id", tok.specialToken);}]
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void ReturnStatement() :
{
    Token tok;
}
{
  tok="return" {jjtn000.addSpecial("return", tok.specialToken);}
  [ Expression() ]
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void ThrowStatement() :
{
    Token tok;
}
{
  tok="throw" {jjtn000.addSpecial("throw", tok.specialToken);}
  Expression()
  tok=";" {jjtn000.addSpecial("semicolon", tok.specialToken);}
}

void SynchronizedStatement() :
{
    Token tok;
}
{
  tok="synchronized"  {jjtn000.addSpecial("synchronized", tok.specialToken);}
  tok="("  {jjtn000.addSpecial("beginExpr", tok.specialToken);}
  Expression()
  tok=")"  {jjtn000.addSpecial("endExpr", tok.specialToken);}
  Block()
}

void TryStatement() :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{
    Token tok;
    int catchCount = 0;
}
{
  tok="try"  {jjtn000.addSpecial("try", tok.specialToken);}
  Block()
  (
    tok="catch"  {jjtn000.setHasCatch(); jjtn000.addSpecial("catch" + catchCount, tok.specialToken);}
    tok="("  {jjtn000.addSpecial("beginExpr" + catchCount, tok.specialToken);}
    FormalParameter()
    tok=")"  {jjtn000.addSpecial("endExpr" + catchCount, tok.specialToken);}
    Block()
    {catchCount++;}
  )*
  [
    tok="finally"  {jjtn000.setHasFinally(); jjtn000.addSpecial("finally", tok.specialToken);}
    Block()
  ]
}

void AssertionStatement() :
{
    Token tok;
}
{
  tok = <IDENTIFIER> {
    if (!tok.image.equals("assert")) {
      throw new ParseException("ERROR: expecting assert");
    }
    if (!jdk1_4) {
      System.err.println("WARNING: assert declared in pre-jdk 1.4 target");
    }
    jjtn000.addSpecial("assert", tok.specialToken);
  }
  Expression()
  [
	  tok=":"  {jjtn000.addSpecial("colon", tok.specialToken);}
	  Expression()
  ]
  tok=";"
  {jjtn000.addSpecial("semicolon", tok.specialToken);
  }
}


